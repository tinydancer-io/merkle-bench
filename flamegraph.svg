<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="31947"><g><title>glassbench::main_macro::after_bench (7 samples, 0.02%)</title><rect x="0.0063%" y="469" width="0.0219%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="7"/><text x="0.2563%" y="479.50"></text></g><g><title>glassbench::db::Db::open (7 samples, 0.02%)</title><rect x="0.0063%" y="453" width="0.0219%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="7"/><text x="0.2563%" y="463.50"></text></g><g><title>rusqlite::Connection::open (7 samples, 0.02%)</title><rect x="0.0063%" y="437" width="0.0219%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="7"/><text x="0.2563%" y="447.50"></text></g><g><title>rusqlite::Connection::open_with_flags (7 samples, 0.02%)</title><rect x="0.0063%" y="421" width="0.0219%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="7"/><text x="0.2563%" y="431.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::open_with_flags (7 samples, 0.02%)</title><rect x="0.0063%" y="405" width="0.0219%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="7"/><text x="0.2563%" y="415.50"></text></g><g><title>openDatabase (7 samples, 0.02%)</title><rect x="0.0063%" y="389" width="0.0219%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="7"/><text x="0.2563%" y="399.50"></text></g><g><title>sqlite3BtreeOpen (7 samples, 0.02%)</title><rect x="0.0063%" y="373" width="0.0219%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="7"/><text x="0.2563%" y="383.50"></text></g><g><title>sqlite3PagerOpen (7 samples, 0.02%)</title><rect x="0.0063%" y="357" width="0.0219%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="7"/><text x="0.2563%" y="367.50"></text></g><g><title>sqlite3DbMallocRaw (7 samples, 0.02%)</title><rect x="0.0063%" y="341" width="0.0219%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="7"/><text x="0.2563%" y="351.50"></text></g><g><title>sqlite3Malloc (7 samples, 0.02%)</title><rect x="0.0063%" y="325" width="0.0219%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="7"/><text x="0.2563%" y="335.50"></text></g><g><title>sqlite3Malloc (7 samples, 0.02%)</title><rect x="0.0063%" y="309" width="0.0219%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="7"/><text x="0.2563%" y="319.50"></text></g><g><title>mallocWithAlarm (7 samples, 0.02%)</title><rect x="0.0063%" y="293" width="0.0219%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="7"/><text x="0.2563%" y="303.50"></text></g><g><title>sqlite3MemMalloc (7 samples, 0.02%)</title><rect x="0.0063%" y="277" width="0.0219%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="7"/><text x="0.2563%" y="287.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.02%)</title><rect x="0.0063%" y="261" width="0.0219%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="7"/><text x="0.2563%" y="271.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="0.0063%" y="245" width="0.0219%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="7"/><text x="0.2563%" y="255.50"></text></g><g><title>malloc_consolidate (7 samples, 0.02%)</title><rect x="0.0063%" y="229" width="0.0219%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="7"/><text x="0.2563%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="0.0376%" y="309" width="0.0157%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="5"/><text x="0.2876%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="0.0376%" y="293" width="0.0157%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="5"/><text x="0.2876%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="0.0407%" y="277" width="0.0125%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="4"/><text x="0.2907%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="0.0407%" y="261" width="0.0125%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="4"/><text x="0.2907%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (9 samples, 0.03%)</title><rect x="0.0376%" y="341" width="0.0282%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="9"/><text x="0.2876%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.03%)</title><rect x="0.0376%" y="325" width="0.0282%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="9"/><text x="0.2876%" y="335.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (376 samples, 1.18%)</title><rect x="10.9494%" y="309" width="1.1769%" height="15" fill="rgb(221,5,38)" fg:x="3498" fg:w="376"/><text x="11.1994%" y="319.50"></text></g><g><title>core::ptr::read (4 samples, 0.01%)</title><rect x="12.1263%" y="245" width="0.0125%" height="15" fill="rgb(247,18,42)" fg:x="3874" fg:w="4"/><text x="12.3763%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as bs58::encode::EncodeTarget&gt;::encode_with (3,868 samples, 12.11%)</title><rect x="0.0344%" y="357" width="12.1076%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="3868"/><text x="0.2844%" y="367.50">&lt;alloc::vec::Vec&lt;u..</text></g><g><title>bs58::encode::EncodeBuilder&lt;I&gt;::into::{{closure}} (3,858 samples, 12.08%)</title><rect x="0.0657%" y="341" width="12.0763%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="3858"/><text x="0.3157%" y="351.50">bs58::encode::Enco..</text></g><g><title>bs58::encode::encode_into (3,858 samples, 12.08%)</title><rect x="0.0657%" y="325" width="12.0763%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="3858"/><text x="0.3157%" y="335.50">bs58::encode::enco..</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (5 samples, 0.02%)</title><rect x="12.1263%" y="309" width="0.0157%" height="15" fill="rgb(238,160,17)" fg:x="3874" fg:w="5"/><text x="12.3763%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (5 samples, 0.02%)</title><rect x="12.1263%" y="293" width="0.0157%" height="15" fill="rgb(214,148,48)" fg:x="3874" fg:w="5"/><text x="12.3763%" y="303.50"></text></g><g><title>core::mem::swap (5 samples, 0.02%)</title><rect x="12.1263%" y="277" width="0.0157%" height="15" fill="rgb(232,36,49)" fg:x="3874" fg:w="5"/><text x="12.3763%" y="287.50"></text></g><g><title>core::mem::swap_simple (5 samples, 0.02%)</title><rect x="12.1263%" y="261" width="0.0157%" height="15" fill="rgb(209,103,24)" fg:x="3874" fg:w="5"/><text x="12.3763%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (4 samples, 0.01%)</title><rect x="12.1420%" y="357" width="0.0125%" height="15" fill="rgb(229,88,8)" fg:x="3879" fg:w="4"/><text x="12.3920%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.01%)</title><rect x="12.1420%" y="341" width="0.0125%" height="15" fill="rgb(213,181,19)" fg:x="3879" fg:w="4"/><text x="12.3920%" y="351.50"></text></g><g><title>bs58::encode::EncodeBuilder&lt;I&gt;::into_string (3,874 samples, 12.13%)</title><rect x="0.0313%" y="421" width="12.1263%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="3874"/><text x="0.2813%" y="431.50">bs58::encode::Enco..</text></g><g><title>bs58::encode::EncodeBuilder&lt;I&gt;::into (3,874 samples, 12.13%)</title><rect x="0.0313%" y="405" width="12.1263%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="3874"/><text x="0.2813%" y="415.50">bs58::encode::Enco..</text></g><g><title>&lt;&amp;mut T as bs58::encode::EncodeTarget&gt;::encode_with (3,873 samples, 12.12%)</title><rect x="0.0344%" y="389" width="12.1232%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="3873"/><text x="0.2844%" y="399.50">&lt;&amp;mut T as bs58::e..</text></g><g><title>&lt;alloc::string::String as bs58::encode::EncodeTarget&gt;::encode_with (3,873 samples, 12.12%)</title><rect x="0.0344%" y="373" width="12.1232%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="3873"/><text x="0.2844%" y="383.50">&lt;alloc::string::St..</text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="12.1764%" y="245" width="0.0125%" height="15" fill="rgb(245,192,40)" fg:x="3890" fg:w="4"/><text x="12.4264%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.03%)</title><rect x="12.1670%" y="309" width="0.0250%" height="15" fill="rgb(238,167,29)" fg:x="3887" fg:w="8"/><text x="12.4170%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.03%)</title><rect x="12.1670%" y="293" width="0.0250%" height="15" fill="rgb(232,182,51)" fg:x="3887" fg:w="8"/><text x="12.4170%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="12.1764%" y="277" width="0.0157%" height="15" fill="rgb(231,60,39)" fg:x="3890" fg:w="5"/><text x="12.4264%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="12.1764%" y="261" width="0.0157%" height="15" fill="rgb(208,69,12)" fg:x="3890" fg:w="5"/><text x="12.4264%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 0.03%)</title><rect x="12.1639%" y="389" width="0.0344%" height="15" fill="rgb(235,93,37)" fg:x="3886" fg:w="11"/><text x="12.4139%" y="399.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.03%)</title><rect x="12.1639%" y="373" width="0.0344%" height="15" fill="rgb(213,116,39)" fg:x="3886" fg:w="11"/><text x="12.4139%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.03%)</title><rect x="12.1639%" y="357" width="0.0344%" height="15" fill="rgb(222,207,29)" fg:x="3886" fg:w="11"/><text x="12.4139%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.03%)</title><rect x="12.1639%" y="341" width="0.0344%" height="15" fill="rgb(206,96,30)" fg:x="3886" fg:w="11"/><text x="12.4139%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.03%)</title><rect x="12.1639%" y="325" width="0.0344%" height="15" fill="rgb(218,138,4)" fg:x="3886" fg:w="11"/><text x="12.4139%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (16 samples, 0.05%)</title><rect x="12.1576%" y="421" width="0.0501%" height="15" fill="rgb(250,191,14)" fg:x="3884" fg:w="16"/><text x="12.4076%" y="431.50"></text></g><g><title>core::fmt::write (15 samples, 0.05%)</title><rect x="12.1608%" y="405" width="0.0470%" height="15" fill="rgb(239,60,40)" fg:x="3885" fg:w="15"/><text x="12.4108%" y="415.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (3,892 samples, 12.18%)</title><rect x="0.0282%" y="453" width="12.1827%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="3892"/><text x="0.2782%" y="463.50">&lt;T as alloc::strin..</text></g><g><title>&lt;solana_sdk::signature::Signature as core::fmt::Debug&gt;::fmt (3,892 samples, 12.18%)</title><rect x="0.0282%" y="437" width="12.1827%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="3892"/><text x="0.2782%" y="447.50">&lt;solana_sdk::signa..</text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="12.2202%" y="261" width="0.0157%" height="15" fill="rgb(250,213,24)" fg:x="3904" fg:w="5"/><text x="12.4702%" y="271.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.02%)</title><rect x="12.2171%" y="277" width="0.0219%" height="15" fill="rgb(247,123,22)" fg:x="3903" fg:w="7"/><text x="12.4671%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.03%)</title><rect x="12.2108%" y="373" width="0.0313%" height="15" fill="rgb(231,138,38)" fg:x="3901" fg:w="10"/><text x="12.4608%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.03%)</title><rect x="12.2108%" y="357" width="0.0313%" height="15" fill="rgb(231,145,46)" fg:x="3901" fg:w="10"/><text x="12.4608%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.03%)</title><rect x="12.2108%" y="341" width="0.0313%" height="15" fill="rgb(251,118,11)" fg:x="3901" fg:w="10"/><text x="12.4608%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="12.2140%" y="325" width="0.0282%" height="15" fill="rgb(217,147,25)" fg:x="3902" fg:w="9"/><text x="12.4640%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="12.2140%" y="309" width="0.0282%" height="15" fill="rgb(247,81,37)" fg:x="3902" fg:w="9"/><text x="12.4640%" y="319.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="12.2140%" y="293" width="0.0282%" height="15" fill="rgb(209,12,38)" fg:x="3902" fg:w="9"/><text x="12.4640%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.04%)</title><rect x="12.2108%" y="453" width="0.0376%" height="15" fill="rgb(227,1,9)" fg:x="3901" fg:w="12"/><text x="12.4608%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.04%)</title><rect x="12.2108%" y="437" width="0.0376%" height="15" fill="rgb(248,47,43)" fg:x="3901" fg:w="12"/><text x="12.4608%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.04%)</title><rect x="12.2108%" y="421" width="0.0376%" height="15" fill="rgb(221,10,30)" fg:x="3901" fg:w="12"/><text x="12.4608%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.04%)</title><rect x="12.2108%" y="405" width="0.0376%" height="15" fill="rgb(210,229,1)" fg:x="3901" fg:w="12"/><text x="12.4608%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.04%)</title><rect x="12.2108%" y="389" width="0.0376%" height="15" fill="rgb(222,148,37)" fg:x="3901" fg:w="12"/><text x="12.4608%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="12.2484%" y="453" width="0.0125%" height="15" fill="rgb(234,67,33)" fg:x="3913" fg:w="4"/><text x="12.4984%" y="463.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.01%)</title><rect x="12.2703%" y="117" width="0.0125%" height="15" fill="rgb(247,98,35)" fg:x="3920" fg:w="4"/><text x="12.5203%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="12.2703%" y="213" width="0.0157%" height="15" fill="rgb(247,138,52)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="12.2703%" y="197" width="0.0157%" height="15" fill="rgb(213,79,30)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.02%)</title><rect x="12.2703%" y="181" width="0.0157%" height="15" fill="rgb(246,177,23)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="12.2703%" y="165" width="0.0157%" height="15" fill="rgb(230,62,27)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="12.2703%" y="149" width="0.0157%" height="15" fill="rgb(216,154,8)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="159.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="12.2703%" y="133" width="0.0157%" height="15" fill="rgb(244,35,45)" fg:x="3920" fg:w="5"/><text x="12.5203%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="12.2703%" y="277" width="0.0219%" height="15" fill="rgb(251,115,12)" fg:x="3920" fg:w="7"/><text x="12.5203%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.02%)</title><rect x="12.2703%" y="261" width="0.0219%" height="15" fill="rgb(240,54,50)" fg:x="3920" fg:w="7"/><text x="12.5203%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.02%)</title><rect x="12.2703%" y="245" width="0.0219%" height="15" fill="rgb(233,84,52)" fg:x="3920" fg:w="7"/><text x="12.5203%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.02%)</title><rect x="12.2703%" y="229" width="0.0219%" height="15" fill="rgb(207,117,47)" fg:x="3920" fg:w="7"/><text x="12.5203%" y="239.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="12.3016%" y="197" width="0.0188%" height="15" fill="rgb(249,43,39)" fg:x="3930" fg:w="6"/><text x="12.5516%" y="207.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.03%)</title><rect x="12.2922%" y="277" width="0.0313%" height="15" fill="rgb(209,38,44)" fg:x="3927" fg:w="10"/><text x="12.5422%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.03%)</title><rect x="12.2922%" y="261" width="0.0313%" height="15" fill="rgb(236,212,23)" fg:x="3927" fg:w="10"/><text x="12.5422%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.03%)</title><rect x="12.2922%" y="245" width="0.0313%" height="15" fill="rgb(242,79,21)" fg:x="3927" fg:w="10"/><text x="12.5422%" y="255.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.03%)</title><rect x="12.2922%" y="229" width="0.0313%" height="15" fill="rgb(211,96,35)" fg:x="3927" fg:w="10"/><text x="12.5422%" y="239.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.03%)</title><rect x="12.2922%" y="213" width="0.0313%" height="15" fill="rgb(253,215,40)" fg:x="3927" fg:w="10"/><text x="12.5422%" y="223.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.02%)</title><rect x="12.3267%" y="117" width="0.0157%" height="15" fill="rgb(211,81,21)" fg:x="3938" fg:w="5"/><text x="12.5767%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.09%)</title><rect x="12.2609%" y="421" width="0.0876%" height="15" fill="rgb(208,190,38)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (28 samples, 0.09%)</title><rect x="12.2609%" y="405" width="0.0876%" height="15" fill="rgb(235,213,38)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28 samples, 0.09%)</title><rect x="12.2609%" y="389" width="0.0876%" height="15" fill="rgb(237,122,38)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (28 samples, 0.09%)</title><rect x="12.2609%" y="373" width="0.0876%" height="15" fill="rgb(244,218,35)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28 samples, 0.09%)</title><rect x="12.2609%" y="357" width="0.0876%" height="15" fill="rgb(240,68,47)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28 samples, 0.09%)</title><rect x="12.2609%" y="341" width="0.0876%" height="15" fill="rgb(210,16,53)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (28 samples, 0.09%)</title><rect x="12.2609%" y="325" width="0.0876%" height="15" fill="rgb(235,124,12)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (28 samples, 0.09%)</title><rect x="12.2609%" y="309" width="0.0876%" height="15" fill="rgb(224,169,11)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="319.50"></text></g><g><title>merkle_bench::fd_merkle::{{closure}} (28 samples, 0.09%)</title><rect x="12.2609%" y="293" width="0.0876%" height="15" fill="rgb(250,166,2)" fg:x="3917" fg:w="28"/><text x="12.5109%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.03%)</title><rect x="12.3235%" y="277" width="0.0250%" height="15" fill="rgb(242,216,29)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="12.3235%" y="261" width="0.0250%" height="15" fill="rgb(230,116,27)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="12.3235%" y="245" width="0.0250%" height="15" fill="rgb(228,99,48)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="12.3235%" y="229" width="0.0250%" height="15" fill="rgb(253,11,6)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="12.3235%" y="213" width="0.0250%" height="15" fill="rgb(247,143,39)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.03%)</title><rect x="12.3235%" y="197" width="0.0250%" height="15" fill="rgb(236,97,10)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.03%)</title><rect x="12.3235%" y="181" width="0.0250%" height="15" fill="rgb(233,208,19)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="12.3235%" y="165" width="0.0250%" height="15" fill="rgb(216,164,2)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="12.3235%" y="149" width="0.0250%" height="15" fill="rgb(220,129,5)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="159.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.03%)</title><rect x="12.3235%" y="133" width="0.0250%" height="15" fill="rgb(242,17,10)" fg:x="3937" fg:w="8"/><text x="12.5735%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.09%)</title><rect x="12.2609%" y="453" width="0.0939%" height="15" fill="rgb(242,107,0)" fg:x="3917" fg:w="30"/><text x="12.5109%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.09%)</title><rect x="12.2609%" y="437" width="0.0939%" height="15" fill="rgb(251,28,31)" fg:x="3917" fg:w="30"/><text x="12.5109%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.02%)</title><rect x="12.3548%" y="453" width="0.0157%" height="15" fill="rgb(233,223,10)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.02%)</title><rect x="12.3548%" y="437" width="0.0157%" height="15" fill="rgb(215,21,27)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.02%)</title><rect x="12.3548%" y="421" width="0.0157%" height="15" fill="rgb(232,23,21)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="12.3548%" y="405" width="0.0157%" height="15" fill="rgb(244,5,23)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="12.3548%" y="389" width="0.0157%" height="15" fill="rgb(226,81,46)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="12.3548%" y="373" width="0.0157%" height="15" fill="rgb(247,70,30)" fg:x="3947" fg:w="5"/><text x="12.6048%" y="383.50"></text></g><g><title>__GI___libc_free (4 samples, 0.01%)</title><rect x="12.3580%" y="357" width="0.0125%" height="15" fill="rgb(212,68,19)" fg:x="3948" fg:w="4"/><text x="12.6080%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="12.3705%" y="341" width="0.0188%" height="15" fill="rgb(240,187,13)" fg:x="3952" fg:w="6"/><text x="12.6205%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="12.3705%" y="325" width="0.0188%" height="15" fill="rgb(223,113,26)" fg:x="3952" fg:w="6"/><text x="12.6205%" y="335.50"></text></g><g><title>__GI___libc_free (6 samples, 0.02%)</title><rect x="12.3705%" y="309" width="0.0188%" height="15" fill="rgb(206,192,2)" fg:x="3952" fg:w="6"/><text x="12.6205%" y="319.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="12.3705%" y="293" width="0.0188%" height="15" fill="rgb(241,108,4)" fg:x="3952" fg:w="6"/><text x="12.6205%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt;&gt; (7 samples, 0.02%)</title><rect x="12.3705%" y="453" width="0.0219%" height="15" fill="rgb(247,173,49)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="12.3705%" y="437" width="0.0219%" height="15" fill="rgb(224,114,35)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u8&gt;,u8)]&gt; (7 samples, 0.02%)</title><rect x="12.3705%" y="421" width="0.0219%" height="15" fill="rgb(245,159,27)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt; (7 samples, 0.02%)</title><rect x="12.3705%" y="405" width="0.0219%" height="15" fill="rgb(245,172,44)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="12.3705%" y="389" width="0.0219%" height="15" fill="rgb(236,23,11)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="12.3705%" y="373" width="0.0219%" height="15" fill="rgb(205,117,38)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="12.3705%" y="357" width="0.0219%" height="15" fill="rgb(237,72,25)" fg:x="3952" fg:w="7"/><text x="12.6205%" y="367.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="12.3987%" y="261" width="0.0188%" height="15" fill="rgb(244,70,9)" fg:x="3961" fg:w="6"/><text x="12.6487%" y="271.50"></text></g><g><title>__GI___libc_free (9 samples, 0.03%)</title><rect x="12.3955%" y="277" width="0.0282%" height="15" fill="rgb(217,125,39)" fg:x="3960" fg:w="9"/><text x="12.6455%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.03%)</title><rect x="12.3924%" y="389" width="0.0344%" height="15" fill="rgb(235,36,10)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (11 samples, 0.03%)</title><rect x="12.3924%" y="373" width="0.0344%" height="15" fill="rgb(251,123,47)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="12.3924%" y="357" width="0.0344%" height="15" fill="rgb(221,13,13)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.03%)</title><rect x="12.3924%" y="341" width="0.0344%" height="15" fill="rgb(238,131,9)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.03%)</title><rect x="12.3924%" y="325" width="0.0344%" height="15" fill="rgb(211,50,8)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.03%)</title><rect x="12.3924%" y="309" width="0.0344%" height="15" fill="rgb(245,182,24)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.03%)</title><rect x="12.3924%" y="293" width="0.0344%" height="15" fill="rgb(242,14,37)" fg:x="3959" fg:w="11"/><text x="12.6424%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.04%)</title><rect x="12.3924%" y="437" width="0.0438%" height="15" fill="rgb(246,228,12)" fg:x="3959" fg:w="14"/><text x="12.6424%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;]&gt; (14 samples, 0.04%)</title><rect x="12.3924%" y="421" width="0.0438%" height="15" fill="rgb(213,55,15)" fg:x="3959" fg:w="14"/><text x="12.6424%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (14 samples, 0.04%)</title><rect x="12.3924%" y="405" width="0.0438%" height="15" fill="rgb(209,9,3)" fg:x="3959" fg:w="14"/><text x="12.6424%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (45 samples, 0.14%)</title><rect x="12.3924%" y="453" width="0.1409%" height="15" fill="rgb(230,59,30)" fg:x="3959" fg:w="45"/><text x="12.6424%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (31 samples, 0.10%)</title><rect x="12.4362%" y="437" width="0.0970%" height="15" fill="rgb(209,121,21)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.10%)</title><rect x="12.4362%" y="421" width="0.0970%" height="15" fill="rgb(220,109,13)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.10%)</title><rect x="12.4362%" y="405" width="0.0970%" height="15" fill="rgb(232,18,1)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.10%)</title><rect x="12.4362%" y="389" width="0.0970%" height="15" fill="rgb(215,41,42)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="399.50"></text></g><g><title>__GI___libc_free (31 samples, 0.10%)</title><rect x="12.4362%" y="373" width="0.0970%" height="15" fill="rgb(224,123,36)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="383.50"></text></g><g><title>_int_free (31 samples, 0.10%)</title><rect x="12.4362%" y="357" width="0.0970%" height="15" fill="rgb(240,125,3)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="367.50"></text></g><g><title>malloc_consolidate (31 samples, 0.10%)</title><rect x="12.4362%" y="341" width="0.0970%" height="15" fill="rgb(205,98,50)" fg:x="3973" fg:w="31"/><text x="12.6862%" y="351.50"></text></g><g><title>unlink_chunk (10 samples, 0.03%)</title><rect x="12.5020%" y="325" width="0.0313%" height="15" fill="rgb(205,185,37)" fg:x="3994" fg:w="10"/><text x="12.7520%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (71 samples, 0.22%)</title><rect x="12.6397%" y="245" width="0.2222%" height="15" fill="rgb(238,207,15)" fg:x="4038" fg:w="71"/><text x="12.8897%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (44 samples, 0.14%)</title><rect x="12.7242%" y="229" width="0.1377%" height="15" fill="rgb(213,199,42)" fg:x="4065" fg:w="44"/><text x="12.9742%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.14%)</title><rect x="12.7242%" y="213" width="0.1377%" height="15" fill="rgb(235,201,11)" fg:x="4065" fg:w="44"/><text x="12.9742%" y="223.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (47 samples, 0.15%)</title><rect x="13.0810%" y="101" width="0.1471%" height="15" fill="rgb(207,46,11)" fg:x="4179" fg:w="47"/><text x="13.3310%" y="111.50"></text></g><g><title>alloc_perturb (40 samples, 0.13%)</title><rect x="16.4147%" y="69" width="0.1252%" height="15" fill="rgb(241,35,35)" fg:x="5244" fg:w="40"/><text x="16.6647%" y="79.50"></text></g><g><title>checked_request2size (69 samples, 0.22%)</title><rect x="16.5399%" y="69" width="0.2160%" height="15" fill="rgb(243,32,47)" fg:x="5284" fg:w="69"/><text x="16.7899%" y="79.50"></text></g><g><title>_int_malloc (932 samples, 2.92%)</title><rect x="13.8605%" y="85" width="2.9173%" height="15" fill="rgb(247,202,23)" fg:x="4428" fg:w="932"/><text x="14.1105%" y="95.50">_i..</text></g><g><title>sysmalloc (7 samples, 0.02%)</title><rect x="16.7559%" y="69" width="0.0219%" height="15" fill="rgb(219,102,11)" fg:x="5353" fg:w="7"/><text x="17.0059%" y="79.50"></text></g><g><title>__glibc_morecore (4 samples, 0.01%)</title><rect x="16.7653%" y="53" width="0.0125%" height="15" fill="rgb(243,110,44)" fg:x="5356" fg:w="4"/><text x="17.0153%" y="63.50"></text></g><g><title>__GI___sbrk (4 samples, 0.01%)</title><rect x="16.7653%" y="37" width="0.0125%" height="15" fill="rgb(222,74,54)" fg:x="5356" fg:w="4"/><text x="17.0153%" y="47.50"></text></g><g><title>arena_for_chunk (57 samples, 0.18%)</title><rect x="16.7778%" y="85" width="0.1784%" height="15" fill="rgb(216,99,12)" fg:x="5360" fg:w="57"/><text x="17.0278%" y="95.50"></text></g><g><title>__GI___libc_malloc (1,259 samples, 3.94%)</title><rect x="13.2282%" y="101" width="3.9409%" height="15" fill="rgb(226,22,26)" fg:x="4226" fg:w="1259"/><text x="13.4782%" y="111.50">__GI..</text></g><g><title>checked_request2size (68 samples, 0.21%)</title><rect x="16.9562%" y="85" width="0.2129%" height="15" fill="rgb(217,163,10)" fg:x="5417" fg:w="68"/><text x="17.2062%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,454 samples, 4.55%)</title><rect x="12.8619%" y="197" width="4.5513%" height="15" fill="rgb(213,25,53)" fg:x="4109" fg:w="1454"/><text x="13.1119%" y="207.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,454 samples, 4.55%)</title><rect x="12.8619%" y="181" width="4.5513%" height="15" fill="rgb(252,105,26)" fg:x="4109" fg:w="1454"/><text x="13.1119%" y="191.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,454 samples, 4.55%)</title><rect x="12.8619%" y="165" width="4.5513%" height="15" fill="rgb(220,39,43)" fg:x="4109" fg:w="1454"/><text x="13.1119%" y="175.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,414 samples, 4.43%)</title><rect x="12.9871%" y="149" width="4.4261%" height="15" fill="rgb(229,68,48)" fg:x="4149" fg:w="1414"/><text x="13.2371%" y="159.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,414 samples, 4.43%)</title><rect x="12.9871%" y="133" width="4.4261%" height="15" fill="rgb(252,8,32)" fg:x="4149" fg:w="1414"/><text x="13.2371%" y="143.50">alloc..</text></g><g><title>alloc::alloc::alloc (1,414 samples, 4.43%)</title><rect x="12.9871%" y="117" width="4.4261%" height="15" fill="rgb(223,20,43)" fg:x="4149" fg:w="1414"/><text x="13.2371%" y="127.50">alloc..</text></g><g><title>__rdl_alloc (78 samples, 0.24%)</title><rect x="17.1691%" y="101" width="0.2442%" height="15" fill="rgb(229,81,49)" fg:x="5485" fg:w="78"/><text x="17.4191%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (78 samples, 0.24%)</title><rect x="17.1691%" y="85" width="0.2442%" height="15" fill="rgb(236,28,36)" fg:x="5485" fg:w="78"/><text x="17.4191%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,777 samples, 5.56%)</title><rect x="12.6397%" y="261" width="5.5623%" height="15" fill="rgb(249,185,26)" fg:x="4038" fg:w="1777"/><text x="12.8897%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,706 samples, 5.34%)</title><rect x="12.8619%" y="245" width="5.3401%" height="15" fill="rgb(249,174,33)" fg:x="4109" fg:w="1706"/><text x="13.1119%" y="255.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (1,706 samples, 5.34%)</title><rect x="12.8619%" y="229" width="5.3401%" height="15" fill="rgb(233,201,37)" fg:x="4109" fg:w="1706"/><text x="13.1119%" y="239.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,706 samples, 5.34%)</title><rect x="12.8619%" y="213" width="5.3401%" height="15" fill="rgb(221,78,26)" fg:x="4109" fg:w="1706"/><text x="13.1119%" y="223.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (252 samples, 0.79%)</title><rect x="17.4132%" y="197" width="0.7888%" height="15" fill="rgb(250,127,30)" fg:x="5563" fg:w="252"/><text x="17.6632%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (252 samples, 0.79%)</title><rect x="17.4132%" y="181" width="0.7888%" height="15" fill="rgb(230,49,44)" fg:x="5563" fg:w="252"/><text x="17.6632%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (215 samples, 0.67%)</title><rect x="17.5290%" y="165" width="0.6730%" height="15" fill="rgb(229,67,23)" fg:x="5600" fg:w="215"/><text x="17.7790%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.16%)</title><rect x="18.2020%" y="261" width="0.1565%" height="15" fill="rgb(249,83,47)" fg:x="5815" fg:w="50"/><text x="18.4520%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (19 samples, 0.06%)</title><rect x="18.3585%" y="261" width="0.0595%" height="15" fill="rgb(215,43,3)" fg:x="5865" fg:w="19"/><text x="18.6085%" y="271.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (14 samples, 0.04%)</title><rect x="18.8187%" y="165" width="0.0438%" height="15" fill="rgb(238,154,13)" fg:x="6012" fg:w="14"/><text x="19.0687%" y="175.50"></text></g><g><title>alloc_perturb (26 samples, 0.08%)</title><rect x="20.5497%" y="133" width="0.0814%" height="15" fill="rgb(219,56,2)" fg:x="6565" fg:w="26"/><text x="20.7997%" y="143.50"></text></g><g><title>_int_malloc (444 samples, 1.39%)</title><rect x="19.2569%" y="149" width="1.3898%" height="15" fill="rgb(233,0,4)" fg:x="6152" fg:w="444"/><text x="19.5069%" y="159.50"></text></g><g><title>checked_request2size (5 samples, 0.02%)</title><rect x="20.6310%" y="133" width="0.0157%" height="15" fill="rgb(235,30,7)" fg:x="6591" fg:w="5"/><text x="20.8810%" y="143.50"></text></g><g><title>arena_for_chunk (18 samples, 0.06%)</title><rect x="20.6467%" y="149" width="0.0563%" height="15" fill="rgb(250,79,13)" fg:x="6596" fg:w="18"/><text x="20.8967%" y="159.50"></text></g><g><title>__GI___libc_malloc (607 samples, 1.90%)</title><rect x="18.8625%" y="165" width="1.9000%" height="15" fill="rgb(211,146,34)" fg:x="6026" fg:w="607"/><text x="19.1125%" y="175.50">_..</text></g><g><title>checked_request2size (19 samples, 0.06%)</title><rect x="20.7030%" y="149" width="0.0595%" height="15" fill="rgb(228,22,38)" fg:x="6614" fg:w="19"/><text x="20.9530%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (652 samples, 2.04%)</title><rect x="18.8187%" y="213" width="2.0409%" height="15" fill="rgb(235,168,5)" fg:x="6012" fg:w="652"/><text x="19.0687%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (652 samples, 2.04%)</title><rect x="18.8187%" y="197" width="2.0409%" height="15" fill="rgb(221,155,16)" fg:x="6012" fg:w="652"/><text x="19.0687%" y="207.50">a..</text></g><g><title>alloc::alloc::alloc (652 samples, 2.04%)</title><rect x="18.8187%" y="181" width="2.0409%" height="15" fill="rgb(215,215,53)" fg:x="6012" fg:w="652"/><text x="19.0687%" y="191.50">a..</text></g><g><title>__rdl_alloc (31 samples, 0.10%)</title><rect x="20.7625%" y="165" width="0.0970%" height="15" fill="rgb(223,4,10)" fg:x="6633" fg:w="31"/><text x="21.0125%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.10%)</title><rect x="20.7625%" y="149" width="0.0970%" height="15" fill="rgb(234,103,6)" fg:x="6633" fg:w="31"/><text x="21.0125%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (806 samples, 2.52%)</title><rect x="18.4180%" y="261" width="2.5229%" height="15" fill="rgb(227,97,0)" fg:x="5884" fg:w="806"/><text x="18.6680%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (755 samples, 2.36%)</title><rect x="18.5776%" y="245" width="2.3633%" height="15" fill="rgb(234,150,53)" fg:x="5935" fg:w="755"/><text x="18.8276%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (755 samples, 2.36%)</title><rect x="18.5776%" y="229" width="2.3633%" height="15" fill="rgb(228,201,54)" fg:x="5935" fg:w="755"/><text x="18.8276%" y="239.50">al..</text></g><g><title>core::alloc::layout::Layout::array (26 samples, 0.08%)</title><rect x="20.8595%" y="213" width="0.0814%" height="15" fill="rgb(222,22,37)" fg:x="6664" fg:w="26"/><text x="21.1095%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (26 samples, 0.08%)</title><rect x="20.8595%" y="197" width="0.0814%" height="15" fill="rgb(237,53,32)" fg:x="6664" fg:w="26"/><text x="21.1095%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,697 samples, 8.44%)</title><rect x="12.6334%" y="325" width="8.4421%" height="15" fill="rgb(233,25,53)" fg:x="4036" fg:w="2697"/><text x="12.8834%" y="335.50">&lt;alloc::vec:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,696 samples, 8.44%)</title><rect x="12.6366%" y="309" width="8.4390%" height="15" fill="rgb(210,40,34)" fg:x="4037" fg:w="2696"/><text x="12.8866%" y="319.50">alloc::slice..</text></g><g><title>alloc::slice::hack::to_vec (2,696 samples, 8.44%)</title><rect x="12.6366%" y="293" width="8.4390%" height="15" fill="rgb(241,220,44)" fg:x="4037" fg:w="2696"/><text x="12.8866%" y="303.50">alloc::slice..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,696 samples, 8.44%)</title><rect x="12.6366%" y="277" width="8.4390%" height="15" fill="rgb(235,28,35)" fg:x="4037" fg:w="2696"/><text x="12.8866%" y="287.50">&lt;T as alloc:..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (43 samples, 0.13%)</title><rect x="20.9409%" y="261" width="0.1346%" height="15" fill="rgb(210,56,17)" fg:x="6690" fg:w="43"/><text x="21.1909%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.12%)</title><rect x="21.0755%" y="325" width="0.1158%" height="15" fill="rgb(224,130,29)" fg:x="6733" fg:w="37"/><text x="21.3255%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.06%)</title><rect x="21.1913%" y="293" width="0.0563%" height="15" fill="rgb(235,212,8)" fg:x="6770" fg:w="18"/><text x="21.4413%" y="303.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (18 samples, 0.06%)</title><rect x="21.3166%" y="149" width="0.0563%" height="15" fill="rgb(223,33,50)" fg:x="6810" fg:w="18"/><text x="21.5666%" y="159.50"></text></g><g><title>alloc_perturb (11 samples, 0.03%)</title><rect x="22.2744%" y="117" width="0.0344%" height="15" fill="rgb(219,149,13)" fg:x="7116" fg:w="11"/><text x="22.5244%" y="127.50"></text></g><g><title>_int_malloc (233 samples, 0.73%)</title><rect x="21.6139%" y="133" width="0.7293%" height="15" fill="rgb(250,156,29)" fg:x="6905" fg:w="233"/><text x="21.8639%" y="143.50"></text></g><g><title>checked_request2size (11 samples, 0.03%)</title><rect x="22.3088%" y="117" width="0.0344%" height="15" fill="rgb(216,193,19)" fg:x="7127" fg:w="11"/><text x="22.5588%" y="127.50"></text></g><g><title>arena_for_chunk (20 samples, 0.06%)</title><rect x="22.3433%" y="133" width="0.0626%" height="15" fill="rgb(216,135,14)" fg:x="7138" fg:w="20"/><text x="22.5933%" y="143.50"></text></g><g><title>__GI___libc_malloc (349 samples, 1.09%)</title><rect x="21.3729%" y="149" width="1.0924%" height="15" fill="rgb(241,47,5)" fg:x="6828" fg:w="349"/><text x="21.6229%" y="159.50"></text></g><g><title>checked_request2size (19 samples, 0.06%)</title><rect x="22.4059%" y="133" width="0.0595%" height="15" fill="rgb(233,42,35)" fg:x="7158" fg:w="19"/><text x="22.6559%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (404 samples, 1.26%)</title><rect x="21.2477%" y="245" width="1.2646%" height="15" fill="rgb(231,13,6)" fg:x="6788" fg:w="404"/><text x="21.4977%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (404 samples, 1.26%)</title><rect x="21.2477%" y="229" width="1.2646%" height="15" fill="rgb(207,181,40)" fg:x="6788" fg:w="404"/><text x="21.4977%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (404 samples, 1.26%)</title><rect x="21.2477%" y="213" width="1.2646%" height="15" fill="rgb(254,173,49)" fg:x="6788" fg:w="404"/><text x="21.4977%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (396 samples, 1.24%)</title><rect x="21.2727%" y="197" width="1.2396%" height="15" fill="rgb(221,1,38)" fg:x="6796" fg:w="396"/><text x="21.5227%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (396 samples, 1.24%)</title><rect x="21.2727%" y="181" width="1.2396%" height="15" fill="rgb(206,124,46)" fg:x="6796" fg:w="396"/><text x="21.5227%" y="191.50"></text></g><g><title>alloc::alloc::alloc (396 samples, 1.24%)</title><rect x="21.2727%" y="165" width="1.2396%" height="15" fill="rgb(249,21,11)" fg:x="6796" fg:w="396"/><text x="21.5227%" y="175.50"></text></g><g><title>__rdl_alloc (15 samples, 0.05%)</title><rect x="22.4653%" y="149" width="0.0470%" height="15" fill="rgb(222,201,40)" fg:x="7177" fg:w="15"/><text x="22.7153%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 0.05%)</title><rect x="22.4653%" y="133" width="0.0470%" height="15" fill="rgb(235,61,29)" fg:x="7177" fg:w="15"/><text x="22.7153%" y="143.50"></text></g><g><title>core::clone::Clone::clone (611 samples, 1.91%)</title><rect x="21.1913%" y="325" width="1.9125%" height="15" fill="rgb(219,207,3)" fg:x="6770" fg:w="611"/><text x="21.4413%" y="335.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (611 samples, 1.91%)</title><rect x="21.1913%" y="309" width="1.9125%" height="15" fill="rgb(222,56,46)" fg:x="6770" fg:w="611"/><text x="21.4413%" y="319.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (593 samples, 1.86%)</title><rect x="21.2477%" y="293" width="1.8562%" height="15" fill="rgb(239,76,54)" fg:x="6788" fg:w="593"/><text x="21.4977%" y="303.50">a..</text></g><g><title>alloc::slice::hack::to_vec (593 samples, 1.86%)</title><rect x="21.2477%" y="277" width="1.8562%" height="15" fill="rgb(231,124,27)" fg:x="6788" fg:w="593"/><text x="21.4977%" y="287.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (593 samples, 1.86%)</title><rect x="21.2477%" y="261" width="1.8562%" height="15" fill="rgb(249,195,6)" fg:x="6788" fg:w="593"/><text x="21.4977%" y="271.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (189 samples, 0.59%)</title><rect x="22.5123%" y="245" width="0.5916%" height="15" fill="rgb(237,174,47)" fg:x="7192" fg:w="189"/><text x="22.7623%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (189 samples, 0.59%)</title><rect x="22.5123%" y="229" width="0.5916%" height="15" fill="rgb(206,201,31)" fg:x="7192" fg:w="189"/><text x="22.7623%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (180 samples, 0.56%)</title><rect x="22.5405%" y="213" width="0.5634%" height="15" fill="rgb(231,57,52)" fg:x="7201" fg:w="180"/><text x="22.7905%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,418 samples, 10.70%)</title><rect x="12.5333%" y="389" width="10.6990%" height="15" fill="rgb(248,177,22)" fg:x="4004" fg:w="3418"/><text x="12.7833%" y="399.50">&lt;alloc::vec::Vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,418 samples, 10.70%)</title><rect x="12.5333%" y="373" width="10.6990%" height="15" fill="rgb(215,211,37)" fg:x="4004" fg:w="3418"/><text x="12.7833%" y="383.50">alloc::slice::&lt;i..</text></g><g><title>alloc::slice::hack::to_vec (3,418 samples, 10.70%)</title><rect x="12.5333%" y="357" width="10.6990%" height="15" fill="rgb(241,128,51)" fg:x="4004" fg:w="3418"/><text x="12.7833%" y="367.50">alloc::slice::ha..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,418 samples, 10.70%)</title><rect x="12.5333%" y="341" width="10.6990%" height="15" fill="rgb(227,165,31)" fg:x="4004" fg:w="3418"/><text x="12.7833%" y="351.50">&lt;T as alloc::sli..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (41 samples, 0.13%)</title><rect x="23.1039%" y="325" width="0.1283%" height="15" fill="rgb(228,167,24)" fg:x="7381" fg:w="41"/><text x="23.3539%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.06%)</title><rect x="23.2354%" y="325" width="0.0595%" height="15" fill="rgb(228,143,12)" fg:x="7423" fg:w="19"/><text x="23.4854%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.03%)</title><rect x="23.2948%" y="293" width="0.0344%" height="15" fill="rgb(249,149,8)" fg:x="7442" fg:w="11"/><text x="23.5448%" y="303.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (12 samples, 0.04%)</title><rect x="23.4826%" y="149" width="0.0376%" height="15" fill="rgb(243,35,44)" fg:x="7502" fg:w="12"/><text x="23.7326%" y="159.50"></text></g><g><title>alloc_perturb (11 samples, 0.03%)</title><rect x="24.3654%" y="117" width="0.0344%" height="15" fill="rgb(246,89,9)" fg:x="7784" fg:w="11"/><text x="24.6154%" y="127.50"></text></g><g><title>_int_malloc (216 samples, 0.68%)</title><rect x="23.7362%" y="133" width="0.6761%" height="15" fill="rgb(233,213,13)" fg:x="7583" fg:w="216"/><text x="23.9862%" y="143.50"></text></g><g><title>arena_for_chunk (17 samples, 0.05%)</title><rect x="24.4123%" y="133" width="0.0532%" height="15" fill="rgb(233,141,41)" fg:x="7799" fg:w="17"/><text x="24.6623%" y="143.50"></text></g><g><title>__GI___libc_malloc (305 samples, 0.95%)</title><rect x="23.5202%" y="149" width="0.9547%" height="15" fill="rgb(239,167,4)" fg:x="7514" fg:w="305"/><text x="23.7702%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (385 samples, 1.21%)</title><rect x="23.3293%" y="245" width="1.2051%" height="15" fill="rgb(209,217,16)" fg:x="7453" fg:w="385"/><text x="23.5793%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (385 samples, 1.21%)</title><rect x="23.3293%" y="229" width="1.2051%" height="15" fill="rgb(219,88,35)" fg:x="7453" fg:w="385"/><text x="23.5793%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (385 samples, 1.21%)</title><rect x="23.3293%" y="213" width="1.2051%" height="15" fill="rgb(220,193,23)" fg:x="7453" fg:w="385"/><text x="23.5793%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (358 samples, 1.12%)</title><rect x="23.4138%" y="197" width="1.1206%" height="15" fill="rgb(230,90,52)" fg:x="7480" fg:w="358"/><text x="23.6638%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (358 samples, 1.12%)</title><rect x="23.4138%" y="181" width="1.1206%" height="15" fill="rgb(252,106,19)" fg:x="7480" fg:w="358"/><text x="23.6638%" y="191.50"></text></g><g><title>alloc::alloc::alloc (358 samples, 1.12%)</title><rect x="23.4138%" y="165" width="1.1206%" height="15" fill="rgb(206,74,20)" fg:x="7480" fg:w="358"/><text x="23.6638%" y="175.50"></text></g><g><title>__rdl_alloc (19 samples, 0.06%)</title><rect x="24.4749%" y="149" width="0.0595%" height="15" fill="rgb(230,138,44)" fg:x="7819" fg:w="19"/><text x="24.7249%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.06%)</title><rect x="24.4749%" y="133" width="0.0595%" height="15" fill="rgb(235,182,43)" fg:x="7819" fg:w="19"/><text x="24.7249%" y="143.50"></text></g><g><title>core::clone::Clone::clone (600 samples, 1.88%)</title><rect x="23.2948%" y="325" width="1.8781%" height="15" fill="rgb(242,16,51)" fg:x="7442" fg:w="600"/><text x="23.5448%" y="335.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (600 samples, 1.88%)</title><rect x="23.2948%" y="309" width="1.8781%" height="15" fill="rgb(248,9,4)" fg:x="7442" fg:w="600"/><text x="23.5448%" y="319.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (589 samples, 1.84%)</title><rect x="23.3293%" y="293" width="1.8437%" height="15" fill="rgb(210,31,22)" fg:x="7453" fg:w="589"/><text x="23.5793%" y="303.50">a..</text></g><g><title>alloc::slice::hack::to_vec (589 samples, 1.84%)</title><rect x="23.3293%" y="277" width="1.8437%" height="15" fill="rgb(239,54,39)" fg:x="7453" fg:w="589"/><text x="23.5793%" y="287.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (589 samples, 1.84%)</title><rect x="23.3293%" y="261" width="1.8437%" height="15" fill="rgb(230,99,41)" fg:x="7453" fg:w="589"/><text x="23.5793%" y="271.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (204 samples, 0.64%)</title><rect x="24.5344%" y="245" width="0.6386%" height="15" fill="rgb(253,106,12)" fg:x="7838" fg:w="204"/><text x="24.7844%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (204 samples, 0.64%)</title><rect x="24.5344%" y="229" width="0.6386%" height="15" fill="rgb(213,46,41)" fg:x="7838" fg:w="204"/><text x="24.7844%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (184 samples, 0.58%)</title><rect x="24.5970%" y="213" width="0.5760%" height="15" fill="rgb(215,133,35)" fg:x="7858" fg:w="184"/><text x="24.8470%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (656 samples, 2.05%)</title><rect x="23.2322%" y="389" width="2.0534%" height="15" fill="rgb(213,28,5)" fg:x="7422" fg:w="656"/><text x="23.4822%" y="399.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (656 samples, 2.05%)</title><rect x="23.2322%" y="373" width="2.0534%" height="15" fill="rgb(215,77,49)" fg:x="7422" fg:w="656"/><text x="23.4822%" y="383.50">a..</text></g><g><title>alloc::slice::hack::to_vec (656 samples, 2.05%)</title><rect x="23.2322%" y="357" width="2.0534%" height="15" fill="rgb(248,100,22)" fg:x="7422" fg:w="656"/><text x="23.4822%" y="367.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (656 samples, 2.05%)</title><rect x="23.2322%" y="341" width="2.0534%" height="15" fill="rgb(208,67,9)" fg:x="7422" fg:w="656"/><text x="23.4822%" y="351.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (36 samples, 0.11%)</title><rect x="25.1729%" y="325" width="0.1127%" height="15" fill="rgb(219,133,21)" fg:x="8042" fg:w="36"/><text x="25.4229%" y="335.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (8 samples, 0.03%)</title><rect x="25.3764%" y="245" width="0.0250%" height="15" fill="rgb(246,46,29)" fg:x="8107" fg:w="8"/><text x="25.6264%" y="255.50"></text></g><g><title>_int_free (250 samples, 0.78%)</title><rect x="25.5110%" y="229" width="0.7825%" height="15" fill="rgb(246,185,52)" fg:x="8150" fg:w="250"/><text x="25.7610%" y="239.50"></text></g><g><title>__GI___libc_free (287 samples, 0.90%)</title><rect x="25.4014%" y="245" width="0.8984%" height="15" fill="rgb(252,136,11)" fg:x="8115" fg:w="287"/><text x="25.6514%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (326 samples, 1.02%)</title><rect x="25.2982%" y="277" width="1.0204%" height="15" fill="rgb(219,138,53)" fg:x="8082" fg:w="326"/><text x="25.5482%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (326 samples, 1.02%)</title><rect x="25.2982%" y="261" width="1.0204%" height="15" fill="rgb(211,51,23)" fg:x="8082" fg:w="326"/><text x="25.5482%" y="271.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.02%)</title><rect x="26.2998%" y="245" width="0.0188%" height="15" fill="rgb(247,221,28)" fg:x="8402" fg:w="6"/><text x="26.5498%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.02%)</title><rect x="26.2998%" y="229" width="0.0188%" height="15" fill="rgb(251,222,45)" fg:x="8402" fg:w="6"/><text x="26.5498%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (344 samples, 1.08%)</title><rect x="25.2856%" y="373" width="1.0768%" height="15" fill="rgb(217,162,53)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u8&gt;,u8)]&gt; (344 samples, 1.08%)</title><rect x="25.2856%" y="357" width="1.0768%" height="15" fill="rgb(229,93,14)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt; (344 samples, 1.08%)</title><rect x="25.2856%" y="341" width="1.0768%" height="15" fill="rgb(209,67,49)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (344 samples, 1.08%)</title><rect x="25.2856%" y="325" width="1.0768%" height="15" fill="rgb(213,87,29)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (344 samples, 1.08%)</title><rect x="25.2856%" y="309" width="1.0768%" height="15" fill="rgb(205,151,52)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (344 samples, 1.08%)</title><rect x="25.2856%" y="293" width="1.0768%" height="15" fill="rgb(253,215,39)" fg:x="8078" fg:w="344"/><text x="25.5356%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.04%)</title><rect x="26.3186%" y="277" width="0.0438%" height="15" fill="rgb(221,220,41)" fg:x="8408" fg:w="14"/><text x="26.5686%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt;&gt; (686 samples, 2.15%)</title><rect x="25.2856%" y="389" width="2.1473%" height="15" fill="rgb(218,133,21)" fg:x="8078" fg:w="686"/><text x="25.5356%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt;&gt; (342 samples, 1.07%)</title><rect x="26.3624%" y="373" width="1.0705%" height="15" fill="rgb(221,193,43)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (342 samples, 1.07%)</title><rect x="26.3624%" y="357" width="1.0705%" height="15" fill="rgb(240,128,52)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (342 samples, 1.07%)</title><rect x="26.3624%" y="341" width="1.0705%" height="15" fill="rgb(253,114,12)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (342 samples, 1.07%)</title><rect x="26.3624%" y="325" width="1.0705%" height="15" fill="rgb(215,223,47)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="335.50"></text></g><g><title>__GI___libc_free (342 samples, 1.07%)</title><rect x="26.3624%" y="309" width="1.0705%" height="15" fill="rgb(248,225,23)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="319.50"></text></g><g><title>_int_free (342 samples, 1.07%)</title><rect x="26.3624%" y="293" width="1.0705%" height="15" fill="rgb(250,108,0)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="303.50"></text></g><g><title>malloc_consolidate (342 samples, 1.07%)</title><rect x="26.3624%" y="277" width="1.0705%" height="15" fill="rgb(228,208,7)" fg:x="8422" fg:w="342"/><text x="26.6124%" y="287.50"></text></g><g><title>unlink_chunk (46 samples, 0.14%)</title><rect x="27.2889%" y="261" width="0.1440%" height="15" fill="rgb(244,45,10)" fg:x="8718" fg:w="46"/><text x="27.5389%" y="271.50"></text></g><g><title>fd_bmtree32_hash_leaf__extern (11 samples, 0.03%)</title><rect x="27.4329%" y="389" width="0.0344%" height="15" fill="rgb(207,125,25)" fg:x="8764" fg:w="11"/><text x="27.6829%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.07%)</title><rect x="27.7460%" y="373" width="0.0689%" height="15" fill="rgb(210,195,18)" fg:x="8864" fg:w="22"/><text x="27.9960%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.07%)</title><rect x="27.7460%" y="357" width="0.0689%" height="15" fill="rgb(249,80,12)" fg:x="8864" fg:w="22"/><text x="27.9960%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.07%)</title><rect x="27.7460%" y="341" width="0.0689%" height="15" fill="rgb(221,65,9)" fg:x="8864" fg:w="22"/><text x="27.9960%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (32 samples, 0.10%)</title><rect x="27.8148%" y="373" width="0.1002%" height="15" fill="rgb(235,49,36)" fg:x="8886" fg:w="32"/><text x="28.0648%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32 samples, 0.10%)</title><rect x="27.8148%" y="357" width="0.1002%" height="15" fill="rgb(225,32,20)" fg:x="8886" fg:w="32"/><text x="28.0648%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.10%)</title><rect x="27.8148%" y="341" width="0.1002%" height="15" fill="rgb(215,141,46)" fg:x="8886" fg:w="32"/><text x="28.0648%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="27.9150%" y="373" width="0.0344%" height="15" fill="rgb(250,160,47)" fg:x="8918" fg:w="11"/><text x="28.1650%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (114 samples, 0.36%)</title><rect x="27.9525%" y="373" width="0.3568%" height="15" fill="rgb(216,222,40)" fg:x="8930" fg:w="114"/><text x="28.2025%" y="383.50"></text></g><g><title>core::ptr::write (52 samples, 0.16%)</title><rect x="28.1466%" y="357" width="0.1628%" height="15" fill="rgb(234,217,39)" fg:x="8992" fg:w="52"/><text x="28.3966%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.05%)</title><rect x="28.3094%" y="373" width="0.0470%" height="15" fill="rgb(207,178,40)" fg:x="9044" fg:w="15"/><text x="28.5594%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.05%)</title><rect x="28.3094%" y="357" width="0.0470%" height="15" fill="rgb(221,136,13)" fg:x="9044" fg:w="15"/><text x="28.5594%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15 samples, 0.05%)</title><rect x="28.3094%" y="341" width="0.0470%" height="15" fill="rgb(249,199,10)" fg:x="9044" fg:w="15"/><text x="28.5594%" y="351.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (29 samples, 0.09%)</title><rect x="28.4409%" y="197" width="0.0908%" height="15" fill="rgb(249,222,13)" fg:x="9086" fg:w="29"/><text x="28.6909%" y="207.50"></text></g><g><title>_int_free (395 samples, 1.24%)</title><rect x="29.0387%" y="181" width="1.2364%" height="15" fill="rgb(244,185,38)" fg:x="9277" fg:w="395"/><text x="29.2887%" y="191.50"></text></g><g><title>__GI___libc_free (575 samples, 1.80%)</title><rect x="28.5316%" y="197" width="1.7999%" height="15" fill="rgb(236,202,9)" fg:x="9115" fg:w="575"/><text x="28.7816%" y="207.50">_..</text></g><g><title>arena_for_chunk (18 samples, 0.06%)</title><rect x="30.2751%" y="181" width="0.0563%" height="15" fill="rgb(250,229,37)" fg:x="9672" fg:w="18"/><text x="30.5251%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (653 samples, 2.04%)</title><rect x="28.3626%" y="229" width="2.0440%" height="15" fill="rgb(206,174,23)" fg:x="9061" fg:w="653"/><text x="28.6126%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (653 samples, 2.04%)</title><rect x="28.3626%" y="213" width="2.0440%" height="15" fill="rgb(211,33,43)" fg:x="9061" fg:w="653"/><text x="28.6126%" y="223.50">a..</text></g><g><title>__rdl_dealloc (24 samples, 0.08%)</title><rect x="30.3315%" y="197" width="0.0751%" height="15" fill="rgb(245,58,50)" fg:x="9690" fg:w="24"/><text x="30.5815%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.08%)</title><rect x="30.3315%" y="181" width="0.0751%" height="15" fill="rgb(244,68,36)" fg:x="9690" fg:w="24"/><text x="30.5815%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (680 samples, 2.13%)</title><rect x="28.3595%" y="309" width="2.1285%" height="15" fill="rgb(232,229,15)" fg:x="9060" fg:w="680"/><text x="28.6095%" y="319.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (680 samples, 2.13%)</title><rect x="28.3595%" y="293" width="2.1285%" height="15" fill="rgb(254,30,23)" fg:x="9060" fg:w="680"/><text x="28.6095%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (679 samples, 2.13%)</title><rect x="28.3626%" y="277" width="2.1254%" height="15" fill="rgb(235,160,14)" fg:x="9061" fg:w="679"/><text x="28.6126%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (679 samples, 2.13%)</title><rect x="28.3626%" y="261" width="2.1254%" height="15" fill="rgb(212,155,44)" fg:x="9061" fg:w="679"/><text x="28.6126%" y="271.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (679 samples, 2.13%)</title><rect x="28.3626%" y="245" width="2.1254%" height="15" fill="rgb(226,2,50)" fg:x="9061" fg:w="679"/><text x="28.6126%" y="255.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (26 samples, 0.08%)</title><rect x="30.4066%" y="229" width="0.0814%" height="15" fill="rgb(234,177,6)" fg:x="9714" fg:w="26"/><text x="30.6566%" y="239.50"></text></g><g><title>_int_free (144 samples, 0.45%)</title><rect x="30.5850%" y="229" width="0.4507%" height="15" fill="rgb(217,24,9)" fg:x="9771" fg:w="144"/><text x="30.8350%" y="239.50"></text></g><g><title>__GI___libc_free (175 samples, 0.55%)</title><rect x="30.5349%" y="245" width="0.5478%" height="15" fill="rgb(220,13,46)" fg:x="9755" fg:w="175"/><text x="30.7849%" y="255.50"></text></g><g><title>arena_for_chunk (15 samples, 0.05%)</title><rect x="31.0358%" y="229" width="0.0470%" height="15" fill="rgb(239,221,27)" fg:x="9915" fg:w="15"/><text x="31.2858%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (192 samples, 0.60%)</title><rect x="30.5256%" y="277" width="0.6010%" height="15" fill="rgb(222,198,25)" fg:x="9752" fg:w="192"/><text x="30.7756%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (192 samples, 0.60%)</title><rect x="30.5256%" y="261" width="0.6010%" height="15" fill="rgb(211,99,13)" fg:x="9752" fg:w="192"/><text x="30.7756%" y="271.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.04%)</title><rect x="31.0827%" y="245" width="0.0438%" height="15" fill="rgb(232,111,31)" fg:x="9930" fg:w="14"/><text x="31.3327%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.04%)</title><rect x="31.0827%" y="229" width="0.0438%" height="15" fill="rgb(245,82,37)" fg:x="9930" fg:w="14"/><text x="31.3327%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (887 samples, 2.78%)</title><rect x="28.3563%" y="357" width="2.7765%" height="15" fill="rgb(227,149,46)" fg:x="9059" fg:w="887"/><text x="28.6063%" y="367.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;]&gt; (887 samples, 2.78%)</title><rect x="28.3563%" y="341" width="2.7765%" height="15" fill="rgb(218,36,50)" fg:x="9059" fg:w="887"/><text x="28.6063%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (887 samples, 2.78%)</title><rect x="28.3563%" y="325" width="2.7765%" height="15" fill="rgb(226,80,48)" fg:x="9059" fg:w="887"/><text x="28.6063%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (206 samples, 0.64%)</title><rect x="30.4880%" y="309" width="0.6448%" height="15" fill="rgb(238,224,15)" fg:x="9740" fg:w="206"/><text x="30.7380%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (206 samples, 0.64%)</title><rect x="30.4880%" y="293" width="0.6448%" height="15" fill="rgb(241,136,10)" fg:x="9740" fg:w="206"/><text x="30.7380%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2,575 samples, 8.06%)</title><rect x="28.3563%" y="373" width="8.0602%" height="15" fill="rgb(208,32,45)" fg:x="9059" fg:w="2575"/><text x="28.6063%" y="383.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (1,688 samples, 5.28%)</title><rect x="31.1328%" y="357" width="5.2838%" height="15" fill="rgb(207,135,9)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="367.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,688 samples, 5.28%)</title><rect x="31.1328%" y="341" width="5.2838%" height="15" fill="rgb(206,86,44)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="351.50">&lt;alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,688 samples, 5.28%)</title><rect x="31.1328%" y="325" width="5.2838%" height="15" fill="rgb(245,177,15)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="335.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (1,688 samples, 5.28%)</title><rect x="31.1328%" y="309" width="5.2838%" height="15" fill="rgb(206,64,50)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="319.50">alloc:..</text></g><g><title>__GI___libc_free (1,688 samples, 5.28%)</title><rect x="31.1328%" y="293" width="5.2838%" height="15" fill="rgb(234,36,40)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="303.50">__GI__..</text></g><g><title>_int_free (1,688 samples, 5.28%)</title><rect x="31.1328%" y="277" width="5.2838%" height="15" fill="rgb(213,64,8)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="287.50">_int_f..</text></g><g><title>malloc_consolidate (1,688 samples, 5.28%)</title><rect x="31.1328%" y="261" width="5.2838%" height="15" fill="rgb(210,75,36)" fg:x="9946" fg:w="1688"/><text x="31.3828%" y="271.50">malloc..</text></g><g><title>unlink_chunk (631 samples, 1.98%)</title><rect x="34.4414%" y="245" width="1.9751%" height="15" fill="rgb(229,88,21)" fg:x="11003" fg:w="631"/><text x="34.6914%" y="255.50">u..</text></g><g><title>&lt;solana_program::hash::Hasher as core::default::Default&gt;::default (63 samples, 0.20%)</title><rect x="38.2289%" y="357" width="0.1972%" height="15" fill="rgb(252,204,47)" fg:x="12213" fg:w="63"/><text x="38.4789%" y="367.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (29 samples, 0.09%)</title><rect x="38.3354%" y="341" width="0.0908%" height="15" fill="rgb(208,77,27)" fg:x="12247" fg:w="29"/><text x="38.5854%" y="351.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (29 samples, 0.09%)</title><rect x="38.3354%" y="325" width="0.0908%" height="15" fill="rgb(221,76,26)" fg:x="12247" fg:w="29"/><text x="38.5854%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (164 samples, 0.51%)</title><rect x="38.6421%" y="341" width="0.5134%" height="15" fill="rgb(225,139,18)" fg:x="12345" fg:w="164"/><text x="38.8921%" y="351.50"></text></g><g><title>&lt;block_buffer::Eager as block_buffer::sealed::Sealed&gt;::invariant (34 samples, 0.11%)</title><rect x="39.5781%" y="277" width="0.1064%" height="15" fill="rgb(230,137,11)" fg:x="12644" fg:w="34"/><text x="39.8281%" y="287.50"></text></g><g><title>&lt;block_buffer::Eager as block_buffer::sealed::Sealed&gt;::split_blocks (26 samples, 0.08%)</title><rect x="39.6845%" y="277" width="0.0814%" height="15" fill="rgb(212,28,1)" fg:x="12678" fg:w="26"/><text x="39.9345%" y="287.50"></text></g><g><title>sha2::sha256::compress256 (31 samples, 0.10%)</title><rect x="39.9161%" y="229" width="0.0970%" height="15" fill="rgb(248,164,17)" fg:x="12752" fg:w="31"/><text x="40.1661%" y="239.50"></text></g><g><title>sha2::sha256::x86::compress (98 samples, 0.31%)</title><rect x="40.0131%" y="229" width="0.3068%" height="15" fill="rgb(222,171,42)" fg:x="12783" fg:w="98"/><text x="40.2631%" y="239.50"></text></g><g><title>sha2::sha256::x86::shani_cpuid::get (33 samples, 0.10%)</title><rect x="40.2166%" y="213" width="0.1033%" height="15" fill="rgb(243,84,45)" fg:x="12848" fg:w="33"/><text x="40.4666%" y="223.50"></text></g><g><title>sha2::sha256::x86::shani_cpuid::init_get (33 samples, 0.10%)</title><rect x="40.2166%" y="197" width="0.1033%" height="15" fill="rgb(252,49,23)" fg:x="12848" fg:w="33"/><text x="40.4666%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.34%)</title><rect x="40.4107%" y="213" width="0.3381%" height="15" fill="rgb(215,19,7)" fg:x="12910" fg:w="108"/><text x="40.6607%" y="223.50"></text></g><g><title>core::core_arch::x86::sha::_mm_sha256rnds2_epu32 (2,235 samples, 7.00%)</title><rect x="40.7487%" y="213" width="6.9960%" height="15" fill="rgb(238,81,41)" fg:x="13018" fg:w="2235"/><text x="40.9987%" y="223.50">core::cor..</text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (219 samples, 0.69%)</title><rect x="47.7447%" y="213" width="0.6855%" height="15" fill="rgb(210,199,37)" fg:x="15253" fg:w="219"/><text x="47.9947%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (120 samples, 0.38%)</title><rect x="48.4365%" y="213" width="0.3756%" height="15" fill="rgb(244,192,49)" fg:x="15474" fg:w="120"/><text x="48.6865%" y="223.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_blend_epi16 (26 samples, 0.08%)</title><rect x="48.8121%" y="213" width="0.0814%" height="15" fill="rgb(226,211,11)" fg:x="15594" fg:w="26"/><text x="49.0621%" y="223.50"></text></g><g><title>core::core_arch::x86::ssse3::_mm_shuffle_epi8 (43 samples, 0.13%)</title><rect x="48.8935%" y="213" width="0.1346%" height="15" fill="rgb(236,162,54)" fg:x="15620" fg:w="43"/><text x="49.1435%" y="223.50"></text></g><g><title>core::core_arch::x86::sha::_mm_sha256msg1_epu32 (678 samples, 2.12%)</title><rect x="49.0281%" y="197" width="2.1223%" height="15" fill="rgb(220,229,9)" fg:x="15663" fg:w="678"/><text x="49.2781%" y="207.50">c..</text></g><g><title>core::core_arch::x86::sha::_mm_sha256msg2_epu32 (464 samples, 1.45%)</title><rect x="51.1503%" y="197" width="1.4524%" height="15" fill="rgb(250,87,22)" fg:x="16341" fg:w="464"/><text x="51.4003%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (117 samples, 0.37%)</title><rect x="52.6027%" y="197" width="0.3662%" height="15" fill="rgb(239,43,17)" fg:x="16805" fg:w="117"/><text x="52.8527%" y="207.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::{{closure}} (4,510 samples, 14.12%)</title><rect x="39.7659%" y="277" width="14.1171%" height="15" fill="rgb(231,177,25)" fg:x="12704" fg:w="4510"/><text x="40.0159%" y="287.50">&lt;digest::core_api::wr..</text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (4,510 samples, 14.12%)</title><rect x="39.7659%" y="261" width="14.1171%" height="15" fill="rgb(219,179,1)" fg:x="12704" fg:w="4510"/><text x="40.0159%" y="271.50">&lt;digest::core_api::ct..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (4,510 samples, 14.12%)</title><rect x="39.7659%" y="245" width="14.1171%" height="15" fill="rgb(238,219,53)" fg:x="12704" fg:w="4510"/><text x="40.0159%" y="255.50">&lt;sha2::core_api::Sha2..</text></g><g><title>sha2::sha256::x86::digest_blocks (4,333 samples, 13.56%)</title><rect x="40.3199%" y="229" width="13.5631%" height="15" fill="rgb(232,167,36)" fg:x="12881" fg:w="4333"/><text x="40.5699%" y="239.50">sha2::sha256::x86::d..</text></g><g><title>sha2::sha256::x86::schedule (1,551 samples, 4.85%)</title><rect x="49.0281%" y="213" width="4.8549%" height="15" fill="rgb(244,19,51)" fg:x="15663" fg:w="1551"/><text x="49.2781%" y="223.50">sha2::..</text></g><g><title>core::core_arch::x86::ssse3::_mm_alignr_epi8 (292 samples, 0.91%)</title><rect x="52.9690%" y="197" width="0.9140%" height="15" fill="rgb(224,6,22)" fg:x="16922" fg:w="292"/><text x="53.2190%" y="207.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::get_pos (45 samples, 0.14%)</title><rect x="53.8830%" y="277" width="0.1409%" height="15" fill="rgb(224,145,5)" fg:x="17214" fg:w="45"/><text x="54.1330%" y="287.50"></text></g><g><title>solana_program::hash::Hasher::hashv (5,368 samples, 16.80%)</title><rect x="38.4261%" y="357" width="16.8028%" height="15" fill="rgb(234,130,49)" fg:x="12276" fg:w="5368"/><text x="38.6761%" y="367.50">solana_program::hash::Hash..</text></g><g><title>solana_program::hash::Hasher::hash (5,135 samples, 16.07%)</title><rect x="39.1555%" y="341" width="16.0735%" height="15" fill="rgb(254,6,2)" fg:x="12509" fg:w="5135"/><text x="39.4055%" y="351.50">solana_program::hash::Has..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (5,135 samples, 16.07%)</title><rect x="39.1555%" y="325" width="16.0735%" height="15" fill="rgb(208,96,46)" fg:x="12509" fg:w="5135"/><text x="39.4055%" y="335.50">&lt;D as digest::digest::Dig..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (5,135 samples, 16.07%)</title><rect x="39.1555%" y="309" width="16.0735%" height="15" fill="rgb(239,3,39)" fg:x="12509" fg:w="5135"/><text x="39.4055%" y="319.50">&lt;digest::core_api::wrappe..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (5,135 samples, 16.07%)</title><rect x="39.1555%" y="293" width="16.0735%" height="15" fill="rgb(233,210,1)" fg:x="12509" fg:w="5135"/><text x="39.4055%" y="303.50">block_buffer::BlockBuffer..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (385 samples, 1.21%)</title><rect x="54.0239%" y="277" width="1.2051%" height="15" fill="rgb(244,137,37)" fg:x="17259" fg:w="385"/><text x="54.2739%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (385 samples, 1.21%)</title><rect x="54.0239%" y="261" width="1.2051%" height="15" fill="rgb(240,136,2)" fg:x="17259" fg:w="385"/><text x="54.2739%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (356 samples, 1.11%)</title><rect x="54.1146%" y="245" width="1.1143%" height="15" fill="rgb(239,18,37)" fg:x="17288" fg:w="356"/><text x="54.3646%" y="255.50"></text></g><g><title>sha2::sha256::compress256 (32 samples, 0.10%)</title><rect x="56.4560%" y="213" width="0.1002%" height="15" fill="rgb(218,185,22)" fg:x="18036" fg:w="32"/><text x="56.7060%" y="223.50"></text></g><g><title>sha2::sha256::x86::compress (98 samples, 0.31%)</title><rect x="56.5562%" y="213" width="0.3068%" height="15" fill="rgb(225,218,4)" fg:x="18068" fg:w="98"/><text x="56.8062%" y="223.50"></text></g><g><title>sha2::sha256::x86::shani_cpuid::get (32 samples, 0.10%)</title><rect x="56.7628%" y="197" width="0.1002%" height="15" fill="rgb(230,182,32)" fg:x="18134" fg:w="32"/><text x="57.0128%" y="207.50"></text></g><g><title>sha2::sha256::x86::shani_cpuid::init_get (32 samples, 0.10%)</title><rect x="56.7628%" y="181" width="0.1002%" height="15" fill="rgb(242,56,43)" fg:x="18134" fg:w="32"/><text x="57.0128%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.29%)</title><rect x="56.9537%" y="197" width="0.2880%" height="15" fill="rgb(233,99,24)" fg:x="18195" fg:w="92"/><text x="57.2037%" y="207.50"></text></g><g><title>core::core_arch::x86::sha::_mm_sha256rnds2_epu32 (2,222 samples, 6.96%)</title><rect x="57.2417%" y="197" width="6.9553%" height="15" fill="rgb(234,209,42)" fg:x="18287" fg:w="2222"/><text x="57.4917%" y="207.50">core::cor..</text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (292 samples, 0.91%)</title><rect x="64.1970%" y="197" width="0.9140%" height="15" fill="rgb(227,7,12)" fg:x="20509" fg:w="292"/><text x="64.4470%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (91 samples, 0.28%)</title><rect x="65.1141%" y="197" width="0.2848%" height="15" fill="rgb(245,203,43)" fg:x="20802" fg:w="91"/><text x="65.3641%" y="207.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_blend_epi16 (29 samples, 0.09%)</title><rect x="65.3989%" y="197" width="0.0908%" height="15" fill="rgb(238,205,33)" fg:x="20893" fg:w="29"/><text x="65.6489%" y="207.50"></text></g><g><title>core::core_arch::x86::ssse3::_mm_shuffle_epi8 (74 samples, 0.23%)</title><rect x="65.4897%" y="197" width="0.2316%" height="15" fill="rgb(231,56,7)" fg:x="20922" fg:w="74"/><text x="65.7397%" y="207.50"></text></g><g><title>core::core_arch::x86::sha::_mm_sha256msg1_epu32 (654 samples, 2.05%)</title><rect x="65.7214%" y="181" width="2.0471%" height="15" fill="rgb(244,186,29)" fg:x="20996" fg:w="654"/><text x="65.9714%" y="191.50">c..</text></g><g><title>core::core_arch::x86::sha::_mm_sha256msg2_epu32 (432 samples, 1.35%)</title><rect x="67.7685%" y="181" width="1.3522%" height="15" fill="rgb(234,111,31)" fg:x="21650" fg:w="432"/><text x="68.0185%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (105 samples, 0.33%)</title><rect x="69.1207%" y="181" width="0.3287%" height="15" fill="rgb(241,149,10)" fg:x="22082" fg:w="105"/><text x="69.3707%" y="191.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (4,482 samples, 14.03%)</title><rect x="56.3496%" y="229" width="14.0295%" height="15" fill="rgb(249,206,44)" fg:x="18002" fg:w="4482"/><text x="56.5996%" y="239.50">&lt;sha2::core_api::Sha2..</text></g><g><title>sha2::sha256::x86::digest_blocks (4,318 samples, 13.52%)</title><rect x="56.8629%" y="213" width="13.5161%" height="15" fill="rgb(251,153,30)" fg:x="18166" fg:w="4318"/><text x="57.1129%" y="223.50">sha2::sha256::x86::d..</text></g><g><title>sha2::sha256::x86::schedule (1,488 samples, 4.66%)</title><rect x="65.7214%" y="197" width="4.6577%" height="15" fill="rgb(239,152,38)" fg:x="20996" fg:w="1488"/><text x="65.9714%" y="207.50">sha2:..</text></g><g><title>core::core_arch::x86::ssse3::_mm_alignr_epi8 (297 samples, 0.93%)</title><rect x="69.4494%" y="181" width="0.9297%" height="15" fill="rgb(249,139,47)" fg:x="22187" fg:w="297"/><text x="69.6994%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (194 samples, 0.61%)</title><rect x="70.3791%" y="229" width="0.6073%" height="15" fill="rgb(244,64,35)" fg:x="22484" fg:w="194"/><text x="70.6291%" y="239.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (4,783 samples, 14.97%)</title><rect x="56.1117%" y="261" width="14.9717%" height="15" fill="rgb(216,46,15)" fg:x="17926" fg:w="4783"/><text x="56.3617%" y="271.50">block_buffer::BlockBuff..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (4,783 samples, 14.97%)</title><rect x="56.1117%" y="245" width="14.9717%" height="15" fill="rgb(250,74,19)" fg:x="17926" fg:w="4783"/><text x="56.3617%" y="255.50">block_buffer::BlockBuff..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (31 samples, 0.10%)</title><rect x="70.9863%" y="229" width="0.0970%" height="15" fill="rgb(249,42,33)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (31 samples, 0.10%)</title><rect x="70.9863%" y="213" width="0.0970%" height="15" fill="rgb(242,149,17)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (31 samples, 0.10%)</title><rect x="70.9863%" y="197" width="0.0970%" height="15" fill="rgb(244,29,21)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (31 samples, 0.10%)</title><rect x="70.9863%" y="181" width="0.0970%" height="15" fill="rgb(220,130,37)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (31 samples, 0.10%)</title><rect x="70.9863%" y="165" width="0.0970%" height="15" fill="rgb(211,67,2)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.10%)</title><rect x="70.9863%" y="149" width="0.0970%" height="15" fill="rgb(235,68,52)" fg:x="22678" fg:w="31"/><text x="71.2363%" y="159.50"></text></g><g><title>solana_merkle_tree::merkle_tree::MerkleTree::new_custom (14,379 samples, 45.01%)</title><rect x="27.4674%" y="389" width="45.0089%" height="15" fill="rgb(246,142,3)" fg:x="8775" fg:w="14379"/><text x="27.7174%" y="399.50">solana_merkle_tree::merkle_tree::MerkleTree::new_custom</text></g><g><title>solana_program::hash::hashv (11,520 samples, 36.06%)</title><rect x="36.4166%" y="373" width="36.0597%" height="15" fill="rgb(241,25,7)" fg:x="11634" fg:w="11520"/><text x="36.6666%" y="383.50">solana_program::hash::hashv</text></g><g><title>solana_program::hash::Hasher::result (5,510 samples, 17.25%)</title><rect x="55.2290%" y="357" width="17.2473%" height="15" fill="rgb(242,119,39)" fg:x="17644" fg:w="5510"/><text x="55.4790%" y="367.50">solana_program::hash::Hashe..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (5,488 samples, 17.18%)</title><rect x="55.2978%" y="341" width="17.1785%" height="15" fill="rgb(241,98,45)" fg:x="17666" fg:w="5488"/><text x="55.5478%" y="351.50">&lt;D as digest::digest::Diges..</text></g><g><title>digest::FixedOutput::finalize_fixed (5,488 samples, 17.18%)</title><rect x="55.2978%" y="325" width="17.1785%" height="15" fill="rgb(254,28,30)" fg:x="17666" fg:w="5488"/><text x="55.5478%" y="335.50">digest::FixedOutput::finali..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (5,379 samples, 16.84%)</title><rect x="55.6390%" y="309" width="16.8373%" height="15" fill="rgb(241,142,54)" fg:x="17775" fg:w="5379"/><text x="55.8890%" y="319.50">&lt;digest::core_api::wrapper..</text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5,357 samples, 16.77%)</title><rect x="55.7079%" y="293" width="16.7684%" height="15" fill="rgb(222,85,15)" fg:x="17797" fg:w="5357"/><text x="55.9579%" y="303.50">&lt;digest::core_api::ct_vari..</text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (5,357 samples, 16.77%)</title><rect x="55.7079%" y="277" width="16.7684%" height="15" fill="rgb(210,85,47)" fg:x="17797" fg:w="5357"/><text x="55.9579%" y="287.50">&lt;sha2::core_api::Sha256Var..</text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (445 samples, 1.39%)</title><rect x="71.0834%" y="261" width="1.3929%" height="15" fill="rgb(224,206,25)" fg:x="22709" fg:w="445"/><text x="71.3334%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (445 samples, 1.39%)</title><rect x="71.0834%" y="245" width="1.3929%" height="15" fill="rgb(243,201,19)" fg:x="22709" fg:w="445"/><text x="71.3334%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (445 samples, 1.39%)</title><rect x="71.0834%" y="229" width="1.3929%" height="15" fill="rgb(236,59,4)" fg:x="22709" fg:w="445"/><text x="71.3334%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (9 samples, 0.03%)</title><rect x="73.3277%" y="373" width="0.0282%" height="15" fill="rgb(254,179,45)" fg:x="23426" fg:w="9"/><text x="73.5777%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.03%)</title><rect x="73.3277%" y="357" width="0.0282%" height="15" fill="rgb(226,14,10)" fg:x="23426" fg:w="9"/><text x="73.5777%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (9 samples, 0.03%)</title><rect x="73.3277%" y="341" width="0.0282%" height="15" fill="rgb(244,27,41)" fg:x="23426" fg:w="9"/><text x="73.5777%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.03%)</title><rect x="73.3277%" y="325" width="0.0282%" height="15" fill="rgb(235,35,32)" fg:x="23426" fg:w="9"/><text x="73.5777%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (138 samples, 0.43%)</title><rect x="73.4341%" y="357" width="0.4320%" height="15" fill="rgb(218,68,31)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (138 samples, 0.43%)</title><rect x="73.4341%" y="341" width="0.4320%" height="15" fill="rgb(207,120,37)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (138 samples, 0.43%)</title><rect x="73.4341%" y="325" width="0.4320%" height="15" fill="rgb(227,98,0)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (138 samples, 0.43%)</title><rect x="73.4341%" y="309" width="0.4320%" height="15" fill="rgb(207,7,3)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (138 samples, 0.43%)</title><rect x="73.4341%" y="293" width="0.4320%" height="15" fill="rgb(206,98,19)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="303.50"></text></g><g><title>alloc::alloc::realloc (138 samples, 0.43%)</title><rect x="73.4341%" y="277" width="0.4320%" height="15" fill="rgb(217,5,26)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="287.50"></text></g><g><title>__rdl_realloc (138 samples, 0.43%)</title><rect x="73.4341%" y="261" width="0.4320%" height="15" fill="rgb(235,190,38)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (138 samples, 0.43%)</title><rect x="73.4341%" y="245" width="0.4320%" height="15" fill="rgb(247,86,24)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="255.50"></text></g><g><title>std::sys::common::alloc::realloc_fallback (138 samples, 0.43%)</title><rect x="73.4341%" y="229" width="0.4320%" height="15" fill="rgb(205,101,16)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (138 samples, 0.43%)</title><rect x="73.4341%" y="213" width="0.4320%" height="15" fill="rgb(246,168,33)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (138 samples, 0.43%)</title><rect x="73.4341%" y="197" width="0.4320%" height="15" fill="rgb(231,114,1)" fg:x="23460" fg:w="138"/><text x="73.6841%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (253 samples, 0.79%)</title><rect x="73.3559%" y="373" width="0.7919%" height="15" fill="rgb(207,184,53)" fg:x="23435" fg:w="253"/><text x="73.6059%" y="383.50"></text></g><g><title>core::ptr::write (90 samples, 0.28%)</title><rect x="73.8661%" y="357" width="0.2817%" height="15" fill="rgb(224,95,51)" fg:x="23598" fg:w="90"/><text x="74.1161%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_be_bytes (17 samples, 0.05%)</title><rect x="74.1478%" y="373" width="0.0532%" height="15" fill="rgb(212,188,45)" fg:x="23688" fg:w="17"/><text x="74.3978%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ne_bytes (17 samples, 0.05%)</title><rect x="74.1478%" y="357" width="0.0532%" height="15" fill="rgb(223,154,38)" fg:x="23688" fg:w="17"/><text x="74.3978%" y="367.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (9 samples, 0.03%)</title><rect x="74.2636%" y="229" width="0.0282%" height="15" fill="rgb(251,22,52)" fg:x="23725" fg:w="9"/><text x="74.5136%" y="239.50"></text></g><g><title>_int_free (257 samples, 0.80%)</title><rect x="74.3701%" y="213" width="0.8045%" height="15" fill="rgb(229,209,22)" fg:x="23759" fg:w="257"/><text x="74.6201%" y="223.50"></text></g><g><title>__GI___libc_free (291 samples, 0.91%)</title><rect x="74.2918%" y="229" width="0.9109%" height="15" fill="rgb(234,138,34)" fg:x="23734" fg:w="291"/><text x="74.5418%" y="239.50"></text></g><g><title>arena_for_chunk (9 samples, 0.03%)</title><rect x="75.1745%" y="213" width="0.0282%" height="15" fill="rgb(212,95,11)" fg:x="24016" fg:w="9"/><text x="75.4245%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (330 samples, 1.03%)</title><rect x="74.2042%" y="261" width="1.0330%" height="15" fill="rgb(240,179,47)" fg:x="23706" fg:w="330"/><text x="74.4542%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (330 samples, 1.03%)</title><rect x="74.2042%" y="245" width="1.0330%" height="15" fill="rgb(240,163,11)" fg:x="23706" fg:w="330"/><text x="74.4542%" y="255.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.03%)</title><rect x="75.2027%" y="229" width="0.0344%" height="15" fill="rgb(236,37,12)" fg:x="24025" fg:w="11"/><text x="75.4527%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.03%)</title><rect x="75.2027%" y="213" width="0.0344%" height="15" fill="rgb(232,164,16)" fg:x="24025" fg:w="11"/><text x="75.4527%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (337 samples, 1.05%)</title><rect x="74.2010%" y="357" width="1.0549%" height="15" fill="rgb(244,205,15)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u8&gt;,u8)]&gt; (337 samples, 1.05%)</title><rect x="74.2010%" y="341" width="1.0549%" height="15" fill="rgb(223,117,47)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt; (337 samples, 1.05%)</title><rect x="74.2010%" y="325" width="1.0549%" height="15" fill="rgb(244,107,35)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (337 samples, 1.05%)</title><rect x="74.2010%" y="309" width="1.0549%" height="15" fill="rgb(205,140,8)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (337 samples, 1.05%)</title><rect x="74.2010%" y="293" width="1.0549%" height="15" fill="rgb(228,84,46)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (337 samples, 1.05%)</title><rect x="74.2010%" y="277" width="1.0549%" height="15" fill="rgb(254,188,9)" fg:x="23705" fg:w="337"/><text x="74.4510%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.02%)</title><rect x="75.2371%" y="261" width="0.0188%" height="15" fill="rgb(206,112,54)" fg:x="24036" fg:w="6"/><text x="75.4871%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt;&gt; (684 samples, 2.14%)</title><rect x="74.2010%" y="373" width="2.1410%" height="15" fill="rgb(216,84,49)" fg:x="23705" fg:w="684"/><text x="74.4510%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u8&gt;,u8)&gt;&gt; (347 samples, 1.09%)</title><rect x="75.2559%" y="357" width="1.0862%" height="15" fill="rgb(214,194,35)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (347 samples, 1.09%)</title><rect x="75.2559%" y="341" width="1.0862%" height="15" fill="rgb(249,28,3)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (347 samples, 1.09%)</title><rect x="75.2559%" y="325" width="1.0862%" height="15" fill="rgb(222,56,52)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (347 samples, 1.09%)</title><rect x="75.2559%" y="309" width="1.0862%" height="15" fill="rgb(245,217,50)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="319.50"></text></g><g><title>__GI___libc_free (347 samples, 1.09%)</title><rect x="75.2559%" y="293" width="1.0862%" height="15" fill="rgb(213,201,24)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="303.50"></text></g><g><title>_int_free (347 samples, 1.09%)</title><rect x="75.2559%" y="277" width="1.0862%" height="15" fill="rgb(248,116,28)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="287.50"></text></g><g><title>malloc_consolidate (347 samples, 1.09%)</title><rect x="75.2559%" y="261" width="1.0862%" height="15" fill="rgb(219,72,43)" fg:x="24042" fg:w="347"/><text x="75.5059%" y="271.50"></text></g><g><title>unlink_chunk (52 samples, 0.16%)</title><rect x="76.1793%" y="245" width="0.1628%" height="15" fill="rgb(209,138,14)" fg:x="24337" fg:w="52"/><text x="76.4293%" y="255.50"></text></g><g><title>fd_sha256_append (384 samples, 1.20%)</title><rect x="76.9618%" y="325" width="1.2020%" height="15" fill="rgb(222,18,33)" fg:x="24587" fg:w="384"/><text x="77.2118%" y="335.50"></text></g><g><title>fd_memcpy (174 samples, 0.54%)</title><rect x="77.6192%" y="309" width="0.5447%" height="15" fill="rgb(213,199,7)" fg:x="24797" fg:w="174"/><text x="77.8692%" y="319.50"></text></g><g><title>fd_memset (81 samples, 0.25%)</title><rect x="78.7680%" y="309" width="0.2535%" height="15" fill="rgb(250,110,10)" fg:x="25164" fg:w="81"/><text x="79.0180%" y="319.50"></text></g><g><title>fd_sha256_fini (333 samples, 1.04%)</title><rect x="78.1638%" y="325" width="1.0424%" height="15" fill="rgb(248,123,6)" fg:x="24971" fg:w="333"/><text x="78.4138%" y="335.50"></text></g><g><title>fd_uint_bswap (59 samples, 0.18%)</title><rect x="79.0215%" y="309" width="0.1847%" height="15" fill="rgb(206,91,31)" fg:x="25245" fg:w="59"/><text x="79.2715%" y="319.50"></text></g><g><title>tiny_merkle_bench::generate_leaf_nodes (2,188 samples, 6.85%)</title><rect x="72.4763%" y="389" width="6.8488%" height="15" fill="rgb(211,154,13)" fg:x="23154" fg:w="2188"/><text x="72.7263%" y="399.50">tiny_merk..</text></g><g><title>tiny_merkle_bench::hash_leaf (953 samples, 2.98%)</title><rect x="76.3421%" y="373" width="2.9831%" height="15" fill="rgb(225,148,7)" fg:x="24389" fg:w="953"/><text x="76.5921%" y="383.50">tin..</text></g><g><title>fd_bmtree32_hash_leaf__extern (924 samples, 2.89%)</title><rect x="76.4328%" y="357" width="2.8923%" height="15" fill="rgb(220,160,43)" fg:x="24418" fg:w="924"/><text x="76.6828%" y="367.50">fd..</text></g><g><title>fd_bmtree32_hash_leaf (859 samples, 2.69%)</title><rect x="76.6363%" y="341" width="2.6888%" height="15" fill="rgb(213,52,39)" fg:x="24483" fg:w="859"/><text x="76.8863%" y="351.50">fd..</text></g><g><title>fd_sha256_init (38 samples, 0.12%)</title><rect x="79.2062%" y="325" width="0.1189%" height="15" fill="rgb(243,137,7)" fg:x="25304" fg:w="38"/><text x="79.4562%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.04%)</title><rect x="79.3377%" y="373" width="0.0438%" height="15" fill="rgb(230,79,13)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.04%)</title><rect x="79.3377%" y="357" width="0.0438%" height="15" fill="rgb(247,105,23)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.04%)</title><rect x="79.3377%" y="341" width="0.0438%" height="15" fill="rgb(223,179,41)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.04%)</title><rect x="79.3377%" y="325" width="0.0438%" height="15" fill="rgb(218,9,34)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14 samples, 0.04%)</title><rect x="79.3377%" y="309" width="0.0438%" height="15" fill="rgb(222,106,8)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 0.04%)</title><rect x="79.3377%" y="293" width="0.0438%" height="15" fill="rgb(211,220,0)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="303.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.04%)</title><rect x="79.3377%" y="277" width="0.0438%" height="15" fill="rgb(229,52,16)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="287.50"></text></g><g><title>__rdl_realloc (14 samples, 0.04%)</title><rect x="79.3377%" y="261" width="0.0438%" height="15" fill="rgb(212,155,18)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.04%)</title><rect x="79.3377%" y="245" width="0.0438%" height="15" fill="rgb(242,21,14)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="255.50"></text></g><g><title>std::sys::common::alloc::realloc_fallback (14 samples, 0.04%)</title><rect x="79.3377%" y="229" width="0.0438%" height="15" fill="rgb(222,19,48)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.04%)</title><rect x="79.3377%" y="213" width="0.0438%" height="15" fill="rgb(232,45,27)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="223.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (14 samples, 0.04%)</title><rect x="79.3377%" y="197" width="0.0438%" height="15" fill="rgb(249,103,42)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="207.50"></text></g><g><title>__posix_memalign (14 samples, 0.04%)</title><rect x="79.3377%" y="181" width="0.0438%" height="15" fill="rgb(246,81,33)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="191.50"></text></g><g><title>__posix_memalign (14 samples, 0.04%)</title><rect x="79.3377%" y="165" width="0.0438%" height="15" fill="rgb(252,33,42)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="175.50"></text></g><g><title>_mid_memalign (14 samples, 0.04%)</title><rect x="79.3377%" y="149" width="0.0438%" height="15" fill="rgb(209,212,41)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="159.50"></text></g><g><title>_int_memalign (14 samples, 0.04%)</title><rect x="79.3377%" y="133" width="0.0438%" height="15" fill="rgb(207,154,6)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="143.50"></text></g><g><title>_int_malloc (14 samples, 0.04%)</title><rect x="79.3377%" y="117" width="0.0438%" height="15" fill="rgb(223,64,47)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="127.50"></text></g><g><title>malloc_consolidate (14 samples, 0.04%)</title><rect x="79.3377%" y="101" width="0.0438%" height="15" fill="rgb(211,161,38)" fg:x="25346" fg:w="14"/><text x="79.5877%" y="111.50"></text></g><g><title>unlink_chunk (4 samples, 0.01%)</title><rect x="79.3690%" y="85" width="0.0125%" height="15" fill="rgb(219,138,40)" fg:x="25356" fg:w="4"/><text x="79.6190%" y="95.50"></text></g><g><title>_mm256_store_si256 (8 samples, 0.03%)</title><rect x="79.4848%" y="325" width="0.0250%" height="15" fill="rgb(241,228,46)" fg:x="25393" fg:w="8"/><text x="79.7348%" y="335.50"></text></g><g><title>fd_sha256_core_shaext (454 samples, 1.42%)</title><rect x="79.5098%" y="325" width="1.4211%" height="15" fill="rgb(223,209,38)" fg:x="25401" fg:w="454"/><text x="79.7598%" y="335.50"></text></g><g><title>fd_memcpy (15 samples, 0.05%)</title><rect x="80.9904%" y="309" width="0.0470%" height="15" fill="rgb(236,164,45)" fg:x="25874" fg:w="15"/><text x="81.2404%" y="319.50"></text></g><g><title>fd_memset (15 samples, 0.05%)</title><rect x="81.0373%" y="309" width="0.0470%" height="15" fill="rgb(231,15,5)" fg:x="25889" fg:w="15"/><text x="81.2873%" y="319.50"></text></g><g><title>glassbench::bench::Bench::task (21,932 samples, 68.65%)</title><rect x="12.5333%" y="453" width="68.6512%" height="15" fill="rgb(252,35,15)" fg:x="4004" fg:w="21932"/><text x="12.7833%" y="463.50">glassbench::bench::Bench::task</text></g><g><title>merkle_bench::fd_merkle::{{closure}} (21,932 samples, 68.65%)</title><rect x="12.5333%" y="437" width="68.6512%" height="15" fill="rgb(248,181,18)" fg:x="4004" fg:w="21932"/><text x="12.7833%" y="447.50">merkle_bench::fd_merkle::{{closure}}</text></g><g><title>glassbench::task_bench::TaskBench::iter (21,932 samples, 68.65%)</title><rect x="12.5333%" y="421" width="68.6512%" height="15" fill="rgb(233,39,42)" fg:x="4004" fg:w="21932"/><text x="12.7833%" y="431.50">glassbench::task_bench::TaskBench::iter</text></g><g><title>merkle_bench::fd_merkle::{{closure}}::{{closure}} (21,932 samples, 68.65%)</title><rect x="12.5333%" y="405" width="68.6512%" height="15" fill="rgb(238,110,33)" fg:x="4004" fg:w="21932"/><text x="12.7833%" y="415.50">merkle_bench::fd_merkle::{{closure}}::{{closure}}</text></g><g><title>tiny_merkle_bench::generate_merkle_tree (594 samples, 1.86%)</title><rect x="79.3251%" y="389" width="1.8593%" height="15" fill="rgb(233,195,10)" fg:x="25342" fg:w="594"/><text x="79.5751%" y="399.50">t..</text></g><g><title>fd_bmtree32_commit_append__extern (576 samples, 1.80%)</title><rect x="79.3815%" y="373" width="1.8030%" height="15" fill="rgb(254,105,3)" fg:x="25360" fg:w="576"/><text x="79.6315%" y="383.50">f..</text></g><g><title>fd_bmtree32_commit_append (567 samples, 1.77%)</title><rect x="79.4096%" y="357" width="1.7748%" height="15" fill="rgb(221,225,9)" fg:x="25369" fg:w="567"/><text x="79.6596%" y="367.50">f..</text></g><g><title>fd_bmtree32_private_merge (551 samples, 1.72%)</title><rect x="79.4597%" y="341" width="1.7247%" height="15" fill="rgb(224,227,45)" fg:x="25385" fg:w="551"/><text x="79.7097%" y="351.50"></text></g><g><title>fd_sha256_hash (81 samples, 0.25%)</title><rect x="80.9309%" y="325" width="0.2535%" height="15" fill="rgb(229,198,43)" fg:x="25855" fg:w="81"/><text x="81.1809%" y="335.50"></text></g><g><title>fd_uint_bswap (31 samples, 0.10%)</title><rect x="81.0874%" y="309" width="0.0970%" height="15" fill="rgb(206,209,35)" fg:x="25905" fg:w="31"/><text x="81.3374%" y="319.50"></text></g><g><title>core::array::Guard&lt;T&gt;::push_unchecked (16 samples, 0.05%)</title><rect x="81.2158%" y="389" width="0.0501%" height="15" fill="rgb(245,195,53)" fg:x="25946" fg:w="16"/><text x="81.4658%" y="399.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (16 samples, 0.05%)</title><rect x="81.2158%" y="373" width="0.0501%" height="15" fill="rgb(240,92,26)" fg:x="25946" fg:w="16"/><text x="81.4658%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.01%)</title><rect x="81.3566%" y="149" width="0.0125%" height="15" fill="rgb(207,40,23)" fg:x="25991" fg:w="4"/><text x="81.6066%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.01%)</title><rect x="81.3566%" y="133" width="0.0125%" height="15" fill="rgb(223,111,35)" fg:x="25991" fg:w="4"/><text x="81.6066%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (17 samples, 0.05%)</title><rect x="81.3723%" y="133" width="0.0532%" height="15" fill="rgb(229,147,28)" fg:x="25996" fg:w="17"/><text x="81.6223%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (17 samples, 0.05%)</title><rect x="81.3723%" y="117" width="0.0532%" height="15" fill="rgb(211,29,28)" fg:x="25996" fg:w="17"/><text x="81.6223%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (17 samples, 0.05%)</title><rect x="81.3723%" y="101" width="0.0532%" height="15" fill="rgb(228,72,33)" fg:x="25996" fg:w="17"/><text x="81.6223%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (17 samples, 0.05%)</title><rect x="81.3723%" y="85" width="0.0532%" height="15" fill="rgb(205,214,31)" fg:x="25996" fg:w="17"/><text x="81.6223%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (4 samples, 0.01%)</title><rect x="81.4255%" y="133" width="0.0125%" height="15" fill="rgb(224,111,15)" fg:x="26013" fg:w="4"/><text x="81.6755%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (4 samples, 0.01%)</title><rect x="81.4255%" y="117" width="0.0125%" height="15" fill="rgb(253,21,26)" fg:x="26013" fg:w="4"/><text x="81.6755%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (4 samples, 0.01%)</title><rect x="81.4255%" y="101" width="0.0125%" height="15" fill="rgb(245,139,43)" fg:x="26013" fg:w="4"/><text x="81.6755%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (18 samples, 0.06%)</title><rect x="81.4380%" y="133" width="0.0563%" height="15" fill="rgb(252,170,7)" fg:x="26017" fg:w="18"/><text x="81.6880%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (18 samples, 0.06%)</title><rect x="81.4380%" y="117" width="0.0563%" height="15" fill="rgb(231,118,14)" fg:x="26017" fg:w="18"/><text x="81.6880%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (18 samples, 0.06%)</title><rect x="81.4380%" y="101" width="0.0563%" height="15" fill="rgb(238,83,0)" fg:x="26017" fg:w="18"/><text x="81.6880%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (21 samples, 0.07%)</title><rect x="81.4944%" y="101" width="0.0657%" height="15" fill="rgb(221,39,39)" fg:x="26035" fg:w="21"/><text x="81.7444%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (28 samples, 0.09%)</title><rect x="81.4944%" y="133" width="0.0876%" height="15" fill="rgb(222,119,46)" fg:x="26035" fg:w="28"/><text x="81.7444%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (28 samples, 0.09%)</title><rect x="81.4944%" y="117" width="0.0876%" height="15" fill="rgb(222,165,49)" fg:x="26035" fg:w="28"/><text x="81.7444%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (7 samples, 0.02%)</title><rect x="81.5601%" y="101" width="0.0219%" height="15" fill="rgb(219,113,52)" fg:x="26056" fg:w="7"/><text x="81.8101%" y="111.50"></text></g><g><title>core::core_arch::x86::m256iExt::as_i32x8 (7 samples, 0.02%)</title><rect x="81.5601%" y="85" width="0.0219%" height="15" fill="rgb(214,7,15)" fg:x="26056" fg:w="7"/><text x="81.8101%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (9 samples, 0.03%)</title><rect x="81.5820%" y="133" width="0.0282%" height="15" fill="rgb(235,32,4)" fg:x="26063" fg:w="9"/><text x="81.8320%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (9 samples, 0.03%)</title><rect x="81.5820%" y="117" width="0.0282%" height="15" fill="rgb(238,90,54)" fg:x="26063" fg:w="9"/><text x="81.8320%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (9 samples, 0.03%)</title><rect x="81.5820%" y="101" width="0.0282%" height="15" fill="rgb(213,208,19)" fg:x="26063" fg:w="9"/><text x="81.8320%" y="111.50"></text></g><g><title>rand_chacha::guts::round (98 samples, 0.31%)</title><rect x="81.3723%" y="149" width="0.3068%" height="15" fill="rgb(233,156,4)" fg:x="25996" fg:w="98"/><text x="81.6223%" y="159.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (22 samples, 0.07%)</title><rect x="81.6102%" y="133" width="0.0689%" height="15" fill="rgb(207,194,5)" fg:x="26072" fg:w="22"/><text x="81.8602%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (22 samples, 0.07%)</title><rect x="81.6102%" y="117" width="0.0689%" height="15" fill="rgb(206,111,30)" fg:x="26072" fg:w="22"/><text x="81.8602%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (22 samples, 0.07%)</title><rect x="81.6102%" y="101" width="0.0689%" height="15" fill="rgb(243,70,54)" fg:x="26072" fg:w="22"/><text x="81.8602%" y="111.50"></text></g><g><title>rand::Rng::gen (142 samples, 0.44%)</title><rect x="81.2658%" y="341" width="0.4445%" height="15" fill="rgb(242,28,8)" fg:x="25962" fg:w="142"/><text x="81.5158%" y="351.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u8&gt; for rand::distributions::Standard&gt;::sample (142 samples, 0.44%)</title><rect x="81.2658%" y="325" width="0.4445%" height="15" fill="rgb(219,106,18)" fg:x="25962" fg:w="142"/><text x="81.5158%" y="335.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (142 samples, 0.44%)</title><rect x="81.2658%" y="309" width="0.4445%" height="15" fill="rgb(244,222,10)" fg:x="25962" fg:w="142"/><text x="81.5158%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (142 samples, 0.44%)</title><rect x="81.2658%" y="293" width="0.4445%" height="15" fill="rgb(236,179,52)" fg:x="25962" fg:w="142"/><text x="81.5158%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (142 samples, 0.44%)</title><rect x="81.2658%" y="277" width="0.4445%" height="15" fill="rgb(213,23,39)" fg:x="25962" fg:w="142"/><text x="81.5158%" y="287.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (124 samples, 0.39%)</title><rect x="81.3222%" y="261" width="0.3881%" height="15" fill="rgb(238,48,10)" fg:x="25980" fg:w="124"/><text x="81.5722%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (123 samples, 0.39%)</title><rect x="81.3253%" y="245" width="0.3850%" height="15" fill="rgb(251,196,23)" fg:x="25981" fg:w="123"/><text x="81.5753%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (123 samples, 0.39%)</title><rect x="81.3253%" y="229" width="0.3850%" height="15" fill="rgb(250,152,24)" fg:x="25981" fg:w="123"/><text x="81.5753%" y="239.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (123 samples, 0.39%)</title><rect x="81.3253%" y="213" width="0.3850%" height="15" fill="rgb(209,150,17)" fg:x="25981" fg:w="123"/><text x="81.5753%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (121 samples, 0.38%)</title><rect x="81.3316%" y="197" width="0.3788%" height="15" fill="rgb(234,202,34)" fg:x="25983" fg:w="121"/><text x="81.5816%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (121 samples, 0.38%)</title><rect x="81.3316%" y="181" width="0.3788%" height="15" fill="rgb(253,148,53)" fg:x="25983" fg:w="121"/><text x="81.5816%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (121 samples, 0.38%)</title><rect x="81.3316%" y="165" width="0.3788%" height="15" fill="rgb(218,129,16)" fg:x="25983" fg:w="121"/><text x="81.5816%" y="175.50"></text></g><g><title>rand_chacha::guts::undiagonalize (10 samples, 0.03%)</title><rect x="81.6790%" y="149" width="0.0313%" height="15" fill="rgb(216,85,19)" fg:x="26094" fg:w="10"/><text x="81.9290%" y="159.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (5 samples, 0.02%)</title><rect x="81.6947%" y="133" width="0.0157%" height="15" fill="rgb(235,228,7)" fg:x="26099" fg:w="5"/><text x="81.9447%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (5 samples, 0.02%)</title><rect x="81.6947%" y="117" width="0.0157%" height="15" fill="rgb(245,175,0)" fg:x="26099" fg:w="5"/><text x="81.9447%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (5 samples, 0.02%)</title><rect x="81.6947%" y="101" width="0.0157%" height="15" fill="rgb(208,168,36)" fg:x="26099" fg:w="5"/><text x="81.9447%" y="111.50"></text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix32 as curve25519_dalek::traits::BasepointTable&gt;::create (26,119 samples, 81.76%)</title><rect x="0.0063%" y="741" width="81.7573%" height="15" fill="rgb(246,171,24)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="751.50">&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix32 as curve25519_dalek::traits::BasepointTable&gt;::create</text></g><g><title>__libc_start_main_impl (26,119 samples, 81.76%)</title><rect x="0.0063%" y="725" width="81.7573%" height="15" fill="rgb(215,142,24)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (26,119 samples, 81.76%)</title><rect x="0.0063%" y="709" width="81.7573%" height="15" fill="rgb(250,187,7)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="719.50">__libc_start_call_main</text></g><g><title>&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create (26,119 samples, 81.76%)</title><rect x="0.0063%" y="693" width="81.7573%" height="15" fill="rgb(228,66,33)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="703.50">&lt;curve25519_dalek::edwards::EdwardsBasepointTableRadix64 as curve25519_dalek::traits::BasepointTable&gt;::create</text></g><g><title>std::rt::lang_start_internal (26,119 samples, 81.76%)</title><rect x="0.0063%" y="677" width="81.7573%" height="15" fill="rgb(234,215,21)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (26,119 samples, 81.76%)</title><rect x="0.0063%" y="661" width="81.7573%" height="15" fill="rgb(222,191,20)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26,119 samples, 81.76%)</title><rect x="0.0063%" y="645" width="81.7573%" height="15" fill="rgb(245,79,54)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26,119 samples, 81.76%)</title><rect x="0.0063%" y="629" width="81.7573%" height="15" fill="rgb(240,10,37)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (26,119 samples, 81.76%)</title><rect x="0.0063%" y="613" width="81.7573%" height="15" fill="rgb(214,192,32)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (26,119 samples, 81.76%)</title><rect x="0.0063%" y="597" width="81.7573%" height="15" fill="rgb(209,36,54)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26,119 samples, 81.76%)</title><rect x="0.0063%" y="581" width="81.7573%" height="15" fill="rgb(220,10,11)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26,119 samples, 81.76%)</title><rect x="0.0063%" y="565" width="81.7573%" height="15" fill="rgb(221,106,17)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (26,119 samples, 81.76%)</title><rect x="0.0063%" y="549" width="81.7573%" height="15" fill="rgb(251,142,44)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (26,119 samples, 81.76%)</title><rect x="0.0063%" y="533" width="81.7573%" height="15" fill="rgb(238,13,15)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26,119 samples, 81.76%)</title><rect x="0.0063%" y="517" width="81.7573%" height="15" fill="rgb(208,107,27)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (26,119 samples, 81.76%)</title><rect x="0.0063%" y="501" width="81.7573%" height="15" fill="rgb(205,136,37)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>merkle_bench::main (26,119 samples, 81.76%)</title><rect x="0.0063%" y="485" width="81.7573%" height="15" fill="rgb(250,205,27)" fg:x="2" fg:w="26119"/><text x="0.2563%" y="495.50">merkle_bench::main</text></g><g><title>merkle_bench::fd_merkle (26,112 samples, 81.74%)</title><rect x="0.0282%" y="469" width="81.7354%" height="15" fill="rgb(210,80,43)" fg:x="9" fg:w="26112"/><text x="0.2782%" y="479.50">merkle_bench::fd_merkle</text></g><g><title>solana_sdk::signature::Signature::new_unique (182 samples, 0.57%)</title><rect x="81.1939%" y="453" width="0.5697%" height="15" fill="rgb(247,160,36)" fg:x="25939" fg:w="182"/><text x="81.4439%" y="463.50"></text></g><g><title>core::array::from_fn (182 samples, 0.57%)</title><rect x="81.1939%" y="437" width="0.5697%" height="15" fill="rgb(234,13,49)" fg:x="25939" fg:w="182"/><text x="81.4439%" y="447.50"></text></g><g><title>core::array::try_from_fn (182 samples, 0.57%)</title><rect x="81.1939%" y="421" width="0.5697%" height="15" fill="rgb(234,122,0)" fg:x="25939" fg:w="182"/><text x="81.4439%" y="431.50"></text></g><g><title>core::array::try_from_fn_erased (175 samples, 0.55%)</title><rect x="81.2158%" y="405" width="0.5478%" height="15" fill="rgb(207,146,38)" fg:x="25946" fg:w="175"/><text x="81.4658%" y="415.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::{{closure}} (159 samples, 0.50%)</title><rect x="81.2658%" y="389" width="0.4977%" height="15" fill="rgb(207,177,25)" fg:x="25962" fg:w="159"/><text x="81.5158%" y="399.50"></text></g><g><title>solana_sdk::signature::Signature::new_unique::{{closure}} (159 samples, 0.50%)</title><rect x="81.2658%" y="373" width="0.4977%" height="15" fill="rgb(211,178,42)" fg:x="25962" fg:w="159"/><text x="81.5158%" y="383.50"></text></g><g><title>rand::random (159 samples, 0.50%)</title><rect x="81.2658%" y="357" width="0.4977%" height="15" fill="rgb(230,69,54)" fg:x="25962" fg:w="159"/><text x="81.5158%" y="367.50"></text></g><g><title>rand::rngs::thread::thread_rng (17 samples, 0.05%)</title><rect x="81.7103%" y="341" width="0.0532%" height="15" fill="rgb(214,135,41)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.05%)</title><rect x="81.7103%" y="325" width="0.0532%" height="15" fill="rgb(237,67,25)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.05%)</title><rect x="81.7103%" y="309" width="0.0532%" height="15" fill="rgb(222,189,50)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="319.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (17 samples, 0.05%)</title><rect x="81.7103%" y="293" width="0.0532%" height="15" fill="rgb(245,148,34)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="303.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::get (17 samples, 0.05%)</title><rect x="81.7103%" y="277" width="0.0532%" height="15" fill="rgb(222,29,6)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="287.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.05%)</title><rect x="81.7103%" y="261" width="0.0532%" height="15" fill="rgb(221,189,43)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.05%)</title><rect x="81.7103%" y="245" width="0.0532%" height="15" fill="rgb(207,36,27)" fg:x="26104" fg:w="17"/><text x="81.9603%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="81.7729%" y="533" width="0.0219%" height="15" fill="rgb(217,90,24)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="81.7729%" y="517" width="0.0219%" height="15" fill="rgb(224,66,35)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.02%)</title><rect x="81.7729%" y="501" width="0.0219%" height="15" fill="rgb(221,13,50)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.02%)</title><rect x="81.7729%" y="485" width="0.0219%" height="15" fill="rgb(236,68,49)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.02%)</title><rect x="81.7729%" y="469" width="0.0219%" height="15" fill="rgb(229,146,28)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="479.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.02%)</title><rect x="81.7729%" y="453" width="0.0219%" height="15" fill="rgb(225,31,38)" fg:x="26124" fg:w="7"/><text x="82.0229%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="81.7729%" y="597" width="0.0250%" height="15" fill="rgb(250,208,3)" fg:x="26124" fg:w="8"/><text x="82.0229%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="81.7729%" y="581" width="0.0250%" height="15" fill="rgb(246,54,23)" fg:x="26124" fg:w="8"/><text x="82.0229%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="81.7729%" y="565" width="0.0250%" height="15" fill="rgb(243,76,11)" fg:x="26124" fg:w="8"/><text x="82.0229%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="81.7729%" y="549" width="0.0250%" height="15" fill="rgb(245,21,50)" fg:x="26124" fg:w="8"/><text x="82.0229%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.06%)</title><rect x="81.7729%" y="725" width="0.0595%" height="15" fill="rgb(228,9,43)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.06%)</title><rect x="81.7729%" y="709" width="0.0595%" height="15" fill="rgb(208,100,47)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.06%)</title><rect x="81.7729%" y="693" width="0.0595%" height="15" fill="rgb(232,26,8)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.06%)</title><rect x="81.7729%" y="677" width="0.0595%" height="15" fill="rgb(216,166,38)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.06%)</title><rect x="81.7729%" y="661" width="0.0595%" height="15" fill="rgb(251,202,51)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.06%)</title><rect x="81.7729%" y="645" width="0.0595%" height="15" fill="rgb(254,216,34)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.06%)</title><rect x="81.7729%" y="629" width="0.0595%" height="15" fill="rgb(251,32,27)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.06%)</title><rect x="81.7729%" y="613" width="0.0595%" height="15" fill="rgb(208,127,28)" fg:x="26124" fg:w="19"/><text x="82.0229%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.03%)</title><rect x="81.7980%" y="597" width="0.0344%" height="15" fill="rgb(224,137,22)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.03%)</title><rect x="81.7980%" y="581" width="0.0344%" height="15" fill="rgb(254,70,32)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.03%)</title><rect x="81.7980%" y="565" width="0.0344%" height="15" fill="rgb(229,75,37)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.03%)</title><rect x="81.7980%" y="549" width="0.0344%" height="15" fill="rgb(252,64,23)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.03%)</title><rect x="81.7980%" y="533" width="0.0344%" height="15" fill="rgb(232,162,48)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="543.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.03%)</title><rect x="81.7980%" y="517" width="0.0344%" height="15" fill="rgb(246,160,12)" fg:x="26132" fg:w="11"/><text x="82.0480%" y="527.50"></text></g><g><title>solana_merkle_tree::merkle_tree::MerkleTree::new_custom (17 samples, 0.05%)</title><rect x="81.8449%" y="725" width="0.0532%" height="15" fill="rgb(247,166,0)" fg:x="26147" fg:w="17"/><text x="82.0949%" y="735.50"></text></g><g><title>[[heap]] (63 samples, 0.20%)</title><rect x="81.7635%" y="741" width="0.1972%" height="15" fill="rgb(249,219,21)" fg:x="26121" fg:w="63"/><text x="82.0135%" y="751.50"></text></g><g><title>solana_sdk::signature::Signature::new_unique (20 samples, 0.06%)</title><rect x="81.8981%" y="725" width="0.0626%" height="15" fill="rgb(205,209,3)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="735.50"></text></g><g><title>core::array::from_fn (20 samples, 0.06%)</title><rect x="81.8981%" y="709" width="0.0626%" height="15" fill="rgb(243,44,1)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="719.50"></text></g><g><title>core::array::try_from_fn (20 samples, 0.06%)</title><rect x="81.8981%" y="693" width="0.0626%" height="15" fill="rgb(206,159,16)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="703.50"></text></g><g><title>core::array::try_from_fn_erased (20 samples, 0.06%)</title><rect x="81.8981%" y="677" width="0.0626%" height="15" fill="rgb(244,77,30)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="687.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::{{closure}} (20 samples, 0.06%)</title><rect x="81.8981%" y="661" width="0.0626%" height="15" fill="rgb(218,69,12)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="671.50"></text></g><g><title>solana_sdk::signature::Signature::new_unique::{{closure}} (20 samples, 0.06%)</title><rect x="81.8981%" y="645" width="0.0626%" height="15" fill="rgb(212,87,7)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="655.50"></text></g><g><title>rand::random (20 samples, 0.06%)</title><rect x="81.8981%" y="629" width="0.0626%" height="15" fill="rgb(245,114,25)" fg:x="26164" fg:w="20"/><text x="82.1481%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="81.9607%" y="581" width="0.0188%" height="15" fill="rgb(210,61,42)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="81.9607%" y="565" width="0.0188%" height="15" fill="rgb(211,52,33)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.02%)</title><rect x="81.9607%" y="549" width="0.0188%" height="15" fill="rgb(234,58,33)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="81.9607%" y="533" width="0.0188%" height="15" fill="rgb(220,115,36)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="81.9607%" y="517" width="0.0188%" height="15" fill="rgb(243,153,54)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="527.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="81.9607%" y="501" width="0.0188%" height="15" fill="rgb(251,47,18)" fg:x="26184" fg:w="6"/><text x="82.2107%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.04%)</title><rect x="81.9607%" y="725" width="0.0407%" height="15" fill="rgb(242,102,42)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.04%)</title><rect x="81.9607%" y="709" width="0.0407%" height="15" fill="rgb(234,31,38)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.04%)</title><rect x="81.9607%" y="693" width="0.0407%" height="15" fill="rgb(221,117,51)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.04%)</title><rect x="81.9607%" y="677" width="0.0407%" height="15" fill="rgb(212,20,18)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="687.50"></text></g><g><title>core::clone::Clone::clone (13 samples, 0.04%)</title><rect x="81.9607%" y="661" width="0.0407%" height="15" fill="rgb(245,133,36)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.04%)</title><rect x="81.9607%" y="645" width="0.0407%" height="15" fill="rgb(212,6,19)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.04%)</title><rect x="81.9607%" y="629" width="0.0407%" height="15" fill="rgb(218,1,36)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.04%)</title><rect x="81.9607%" y="613" width="0.0407%" height="15" fill="rgb(246,84,54)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.04%)</title><rect x="81.9607%" y="597" width="0.0407%" height="15" fill="rgb(242,110,6)" fg:x="26184" fg:w="13"/><text x="82.2107%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.02%)</title><rect x="81.9795%" y="581" width="0.0219%" height="15" fill="rgb(214,47,5)" fg:x="26190" fg:w="7"/><text x="82.2295%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="81.9795%" y="565" width="0.0219%" height="15" fill="rgb(218,159,25)" fg:x="26190" fg:w="7"/><text x="82.2295%" y="575.50"></text></g><g><title>__GI___libc_free (29 samples, 0.09%)</title><rect x="82.0014%" y="725" width="0.0908%" height="15" fill="rgb(215,211,28)" fg:x="26197" fg:w="29"/><text x="82.2514%" y="735.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.06%)</title><rect x="82.0922%" y="725" width="0.0595%" height="15" fill="rgb(238,59,32)" fg:x="26226" fg:w="19"/><text x="82.3422%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.03%)</title><rect x="82.1517%" y="725" width="0.0282%" height="15" fill="rgb(226,82,3)" fg:x="26245" fg:w="9"/><text x="82.4017%" y="735.50"></text></g><g><title>_int_free (10 samples, 0.03%)</title><rect x="82.1799%" y="725" width="0.0313%" height="15" fill="rgb(240,164,32)" fg:x="26254" fg:w="10"/><text x="82.4299%" y="735.50"></text></g><g><title>solana_program::hash::Hasher::result (120 samples, 0.38%)</title><rect x="82.2206%" y="725" width="0.3756%" height="15" fill="rgb(232,46,7)" fg:x="26267" fg:w="120"/><text x="82.4706%" y="735.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (92 samples, 0.29%)</title><rect x="82.3082%" y="709" width="0.2880%" height="15" fill="rgb(229,129,53)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="719.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (92 samples, 0.29%)</title><rect x="82.3082%" y="693" width="0.2880%" height="15" fill="rgb(234,188,29)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="703.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (92 samples, 0.29%)</title><rect x="82.3082%" y="677" width="0.2880%" height="15" fill="rgb(246,141,4)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="687.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (92 samples, 0.29%)</title><rect x="82.3082%" y="661" width="0.2880%" height="15" fill="rgb(229,23,39)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="671.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (92 samples, 0.29%)</title><rect x="82.3082%" y="645" width="0.2880%" height="15" fill="rgb(206,12,3)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="655.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (92 samples, 0.29%)</title><rect x="82.3082%" y="629" width="0.2880%" height="15" fill="rgb(252,226,20)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="639.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (92 samples, 0.29%)</title><rect x="82.3082%" y="613" width="0.2880%" height="15" fill="rgb(216,123,35)" fg:x="26295" fg:w="92"/><text x="82.5582%" y="623.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (24 samples, 0.08%)</title><rect x="82.5211%" y="597" width="0.0751%" height="15" fill="rgb(212,68,40)" fg:x="26363" fg:w="24"/><text x="82.7711%" y="607.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::{{closure}} (46 samples, 0.14%)</title><rect x="82.7589%" y="629" width="0.1440%" height="15" fill="rgb(254,125,32)" fg:x="26439" fg:w="46"/><text x="83.0089%" y="639.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (46 samples, 0.14%)</title><rect x="82.7589%" y="613" width="0.1440%" height="15" fill="rgb(253,97,22)" fg:x="26439" fg:w="46"/><text x="83.0089%" y="623.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (46 samples, 0.14%)</title><rect x="82.7589%" y="597" width="0.1440%" height="15" fill="rgb(241,101,14)" fg:x="26439" fg:w="46"/><text x="83.0089%" y="607.50"></text></g><g><title>solana_program::hash::hashv (215 samples, 0.67%)</title><rect x="82.5962%" y="725" width="0.6730%" height="15" fill="rgb(238,103,29)" fg:x="26387" fg:w="215"/><text x="82.8462%" y="735.50"></text></g><g><title>solana_program::hash::Hasher::hashv (163 samples, 0.51%)</title><rect x="82.7589%" y="709" width="0.5102%" height="15" fill="rgb(233,195,47)" fg:x="26439" fg:w="163"/><text x="83.0089%" y="719.50"></text></g><g><title>solana_program::hash::Hasher::hash (163 samples, 0.51%)</title><rect x="82.7589%" y="693" width="0.5102%" height="15" fill="rgb(246,218,30)" fg:x="26439" fg:w="163"/><text x="83.0089%" y="703.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (163 samples, 0.51%)</title><rect x="82.7589%" y="677" width="0.5102%" height="15" fill="rgb(219,145,47)" fg:x="26439" fg:w="163"/><text x="83.0089%" y="687.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (163 samples, 0.51%)</title><rect x="82.7589%" y="661" width="0.5102%" height="15" fill="rgb(243,12,26)" fg:x="26439" fg:w="163"/><text x="83.0089%" y="671.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (163 samples, 0.51%)</title><rect x="82.7589%" y="645" width="0.5102%" height="15" fill="rgb(214,87,16)" fg:x="26439" fg:w="163"/><text x="83.0089%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (117 samples, 0.37%)</title><rect x="82.9029%" y="629" width="0.3662%" height="15" fill="rgb(208,99,42)" fg:x="26485" fg:w="117"/><text x="83.1529%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (117 samples, 0.37%)</title><rect x="82.9029%" y="613" width="0.3662%" height="15" fill="rgb(253,99,2)" fg:x="26485" fg:w="117"/><text x="83.1529%" y="623.50"></text></g><g><title>[[stack]] (435 samples, 1.36%)</title><rect x="81.9607%" y="741" width="1.3616%" height="15" fill="rgb(220,168,23)" fg:x="26184" fg:w="435"/><text x="82.2107%" y="751.50"></text></g><g><title>unlink_chunk (17 samples, 0.05%)</title><rect x="83.2692%" y="725" width="0.0532%" height="15" fill="rgb(242,38,24)" fg:x="26602" fg:w="17"/><text x="83.5192%" y="735.50"></text></g><g><title>[anon] (84 samples, 0.26%)</title><rect x="83.3224%" y="741" width="0.2629%" height="15" fill="rgb(225,182,9)" fg:x="26619" fg:w="84"/><text x="83.5724%" y="751.50"></text></g><g><title>_int_free (84 samples, 0.26%)</title><rect x="83.3224%" y="725" width="0.2629%" height="15" fill="rgb(243,178,37)" fg:x="26619" fg:w="84"/><text x="83.5724%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.13%)</title><rect x="85.7264%" y="533" width="0.1252%" height="15" fill="rgb(232,139,19)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.13%)</title><rect x="85.7264%" y="517" width="0.1252%" height="15" fill="rgb(225,201,24)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.13%)</title><rect x="85.7264%" y="501" width="0.1252%" height="15" fill="rgb(221,47,46)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.13%)</title><rect x="85.7264%" y="485" width="0.1252%" height="15" fill="rgb(249,23,13)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.13%)</title><rect x="85.7264%" y="469" width="0.1252%" height="15" fill="rgb(219,9,5)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="479.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.13%)</title><rect x="85.7264%" y="453" width="0.1252%" height="15" fill="rgb(254,171,16)" fg:x="27387" fg:w="40"/><text x="85.9764%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (78 samples, 0.24%)</title><rect x="85.7264%" y="597" width="0.2442%" height="15" fill="rgb(230,171,20)" fg:x="27387" fg:w="78"/><text x="85.9764%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 0.24%)</title><rect x="85.7264%" y="581" width="0.2442%" height="15" fill="rgb(210,71,41)" fg:x="27387" fg:w="78"/><text x="85.9764%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 0.24%)</title><rect x="85.7264%" y="565" width="0.2442%" height="15" fill="rgb(206,173,20)" fg:x="27387" fg:w="78"/><text x="85.9764%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.24%)</title><rect x="85.7264%" y="549" width="0.2442%" height="15" fill="rgb(233,88,34)" fg:x="27387" fg:w="78"/><text x="85.9764%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.12%)</title><rect x="85.8516%" y="533" width="0.1189%" height="15" fill="rgb(223,209,46)" fg:x="27427" fg:w="38"/><text x="86.1016%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.12%)</title><rect x="85.8516%" y="517" width="0.1189%" height="15" fill="rgb(250,43,18)" fg:x="27427" fg:w="38"/><text x="86.1016%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (110 samples, 0.34%)</title><rect x="85.7264%" y="725" width="0.3443%" height="15" fill="rgb(208,13,10)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (110 samples, 0.34%)</title><rect x="85.7264%" y="709" width="0.3443%" height="15" fill="rgb(212,200,36)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (110 samples, 0.34%)</title><rect x="85.7264%" y="693" width="0.3443%" height="15" fill="rgb(225,90,30)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (110 samples, 0.34%)</title><rect x="85.7264%" y="677" width="0.3443%" height="15" fill="rgb(236,182,39)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (110 samples, 0.34%)</title><rect x="85.7264%" y="661" width="0.3443%" height="15" fill="rgb(212,144,35)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (110 samples, 0.34%)</title><rect x="85.7264%" y="645" width="0.3443%" height="15" fill="rgb(228,63,44)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (110 samples, 0.34%)</title><rect x="85.7264%" y="629" width="0.3443%" height="15" fill="rgb(228,109,6)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (110 samples, 0.34%)</title><rect x="85.7264%" y="613" width="0.3443%" height="15" fill="rgb(238,117,24)" fg:x="27387" fg:w="110"/><text x="85.9764%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 0.10%)</title><rect x="85.9705%" y="597" width="0.1002%" height="15" fill="rgb(242,26,26)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.10%)</title><rect x="85.9705%" y="581" width="0.1002%" height="15" fill="rgb(221,92,48)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.10%)</title><rect x="85.9705%" y="565" width="0.1002%" height="15" fill="rgb(209,209,32)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.10%)</title><rect x="85.9705%" y="549" width="0.1002%" height="15" fill="rgb(221,70,22)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.10%)</title><rect x="85.9705%" y="533" width="0.1002%" height="15" fill="rgb(248,145,5)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="543.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.10%)</title><rect x="85.9705%" y="517" width="0.1002%" height="15" fill="rgb(226,116,26)" fg:x="27465" fg:w="32"/><text x="86.2205%" y="527.50"></text></g><g><title>&lt;solana_program::hash::Hash as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (36 samples, 0.11%)</title><rect x="86.0707%" y="725" width="0.1127%" height="15" fill="rgb(244,5,17)" fg:x="27497" fg:w="36"/><text x="86.3207%" y="735.50"></text></g><g><title>__GI___libc_free (132 samples, 0.41%)</title><rect x="86.1865%" y="725" width="0.4132%" height="15" fill="rgb(252,159,33)" fg:x="27534" fg:w="132"/><text x="86.4365%" y="735.50"></text></g><g><title>__GI___libc_malloc (188 samples, 0.59%)</title><rect x="86.5997%" y="725" width="0.5885%" height="15" fill="rgb(206,71,0)" fg:x="27666" fg:w="188"/><text x="86.8497%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (127 samples, 0.40%)</title><rect x="87.1882%" y="725" width="0.3975%" height="15" fill="rgb(233,118,54)" fg:x="27854" fg:w="127"/><text x="87.4382%" y="735.50"></text></g><g><title>__memset_avx2_unaligned_erms (34 samples, 0.11%)</title><rect x="87.5857%" y="725" width="0.1064%" height="15" fill="rgb(234,83,48)" fg:x="27981" fg:w="34"/><text x="87.8357%" y="735.50"></text></g><g><title>_int_free (108 samples, 0.34%)</title><rect x="87.6921%" y="725" width="0.3381%" height="15" fill="rgb(228,3,54)" fg:x="28015" fg:w="108"/><text x="87.9421%" y="735.50"></text></g><g><title>_int_malloc (222 samples, 0.69%)</title><rect x="88.0302%" y="725" width="0.6949%" height="15" fill="rgb(226,155,13)" fg:x="28123" fg:w="222"/><text x="88.2802%" y="735.50"></text></g><g><title>fd_bmtree32_hash_leaf__extern (14 samples, 0.04%)</title><rect x="88.7376%" y="725" width="0.0438%" height="15" fill="rgb(241,28,37)" fg:x="28349" fg:w="14"/><text x="88.9876%" y="735.50"></text></g><g><title>fd_sha256_append (86 samples, 0.27%)</title><rect x="88.7814%" y="725" width="0.2692%" height="15" fill="rgb(233,93,10)" fg:x="28363" fg:w="86"/><text x="89.0314%" y="735.50"></text></g><g><title>fd_sha256_core_shaext (2,352 samples, 7.36%)</title><rect x="89.0506%" y="725" width="7.3622%" height="15" fill="rgb(225,113,19)" fg:x="28449" fg:w="2352"/><text x="89.3006%" y="735.50">fd_sha256_..</text></g><g><title>fd_sha256_fini (68 samples, 0.21%)</title><rect x="96.4128%" y="725" width="0.2129%" height="15" fill="rgb(241,2,18)" fg:x="30801" fg:w="68"/><text x="96.6628%" y="735.50"></text></g><g><title>fd_sha256_init (20 samples, 0.06%)</title><rect x="96.6319%" y="725" width="0.0626%" height="15" fill="rgb(228,207,21)" fg:x="30871" fg:w="20"/><text x="96.8819%" y="735.50"></text></g><g><title>glassbench::task_bench::TaskBench::iter (10 samples, 0.03%)</title><rect x="96.6945%" y="725" width="0.0313%" height="15" fill="rgb(213,211,35)" fg:x="30891" fg:w="10"/><text x="96.9445%" y="735.50"></text></g><g><title>main_arena (10 samples, 0.03%)</title><rect x="96.6945%" y="709" width="0.0313%" height="15" fill="rgb(209,83,10)" fg:x="30891" fg:w="10"/><text x="96.9445%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.03%)</title><rect x="96.6945%" y="693" width="0.0313%" height="15" fill="rgb(209,164,1)" fg:x="30891" fg:w="10"/><text x="96.9445%" y="703.50"></text></g><g><title>malloc_consolidate (56 samples, 0.18%)</title><rect x="96.7258%" y="725" width="0.1753%" height="15" fill="rgb(213,184,43)" fg:x="30901" fg:w="56"/><text x="96.9758%" y="735.50"></text></g><g><title>merkle_bench::main (6 samples, 0.02%)</title><rect x="96.9011%" y="725" width="0.0188%" height="15" fill="rgb(231,61,34)" fg:x="30957" fg:w="6"/><text x="97.1511%" y="735.50"></text></g><g><title>merkle_bench::fd_merkle (6 samples, 0.02%)</title><rect x="96.9011%" y="709" width="0.0188%" height="15" fill="rgb(235,75,3)" fg:x="30957" fg:w="6"/><text x="97.1511%" y="719.50"></text></g><g><title>rand::rngs::thread::thread_rng (14 samples, 0.04%)</title><rect x="96.9199%" y="725" width="0.0438%" height="15" fill="rgb(220,106,47)" fg:x="30963" fg:w="14"/><text x="97.1699%" y="735.50"></text></g><g><title>sha2::sha256::x86::compress (104 samples, 0.33%)</title><rect x="96.9637%" y="725" width="0.3255%" height="15" fill="rgb(210,196,33)" fg:x="30977" fg:w="104"/><text x="97.2137%" y="735.50"></text></g><g><title>sha2::sha256::x86::digest_blocks (57 samples, 0.18%)</title><rect x="97.2893%" y="725" width="0.1784%" height="15" fill="rgb(229,154,42)" fg:x="31081" fg:w="57"/><text x="97.5393%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.05%)</title><rect x="97.7619%" y="645" width="0.0501%" height="15" fill="rgb(228,114,26)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (16 samples, 0.05%)</title><rect x="97.7619%" y="629" width="0.0501%" height="15" fill="rgb(208,144,1)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.05%)</title><rect x="97.7619%" y="613" width="0.0501%" height="15" fill="rgb(239,112,37)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.05%)</title><rect x="97.7619%" y="597" width="0.0501%" height="15" fill="rgb(210,96,50)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.05%)</title><rect x="97.7619%" y="581" width="0.0501%" height="15" fill="rgb(222,178,2)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.05%)</title><rect x="97.7619%" y="565" width="0.0501%" height="15" fill="rgb(226,74,18)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.05%)</title><rect x="97.7619%" y="549" width="0.0501%" height="15" fill="rgb(225,67,54)" fg:x="31232" fg:w="16"/><text x="98.0119%" y="559.50"></text></g><g><title>solana_merkle_tree::merkle_tree::MerkleTree::new_custom (126 samples, 0.39%)</title><rect x="97.4677%" y="725" width="0.3944%" height="15" fill="rgb(251,92,32)" fg:x="31138" fg:w="126"/><text x="97.7177%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (32 samples, 0.10%)</title><rect x="97.7619%" y="709" width="0.1002%" height="15" fill="rgb(228,149,22)" fg:x="31232" fg:w="32"/><text x="98.0119%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.10%)</title><rect x="97.7619%" y="693" width="0.1002%" height="15" fill="rgb(243,54,13)" fg:x="31232" fg:w="32"/><text x="98.0119%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;]&gt; (32 samples, 0.10%)</title><rect x="97.7619%" y="677" width="0.1002%" height="15" fill="rgb(243,180,28)" fg:x="31232" fg:w="32"/><text x="98.0119%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (32 samples, 0.10%)</title><rect x="97.7619%" y="661" width="0.1002%" height="15" fill="rgb(208,167,24)" fg:x="31232" fg:w="32"/><text x="98.0119%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (16 samples, 0.05%)</title><rect x="97.8120%" y="645" width="0.0501%" height="15" fill="rgb(245,73,45)" fg:x="31248" fg:w="16"/><text x="98.0620%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.05%)</title><rect x="97.8120%" y="629" width="0.0501%" height="15" fill="rgb(237,203,48)" fg:x="31248" fg:w="16"/><text x="98.0620%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.05%)</title><rect x="97.8120%" y="613" width="0.0501%" height="15" fill="rgb(211,197,16)" fg:x="31248" fg:w="16"/><text x="98.0620%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.05%)</title><rect x="97.8120%" y="597" width="0.0501%" height="15" fill="rgb(243,99,51)" fg:x="31248" fg:w="16"/><text x="98.0620%" y="607.50"></text></g><g><title>solana_program::hash::Hasher::result (68 samples, 0.21%)</title><rect x="97.8621%" y="725" width="0.2129%" height="15" fill="rgb(215,123,29)" fg:x="31264" fg:w="68"/><text x="98.1121%" y="735.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update::{{closure}} (33 samples, 0.10%)</title><rect x="98.4130%" y="629" width="0.1033%" height="15" fill="rgb(239,186,37)" fg:x="31440" fg:w="33"/><text x="98.6630%" y="639.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (33 samples, 0.10%)</title><rect x="98.4130%" y="613" width="0.1033%" height="15" fill="rgb(252,136,39)" fg:x="31440" fg:w="33"/><text x="98.6630%" y="623.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (33 samples, 0.10%)</title><rect x="98.4130%" y="597" width="0.1033%" height="15" fill="rgb(223,213,32)" fg:x="31440" fg:w="33"/><text x="98.6630%" y="607.50"></text></g><g><title>solana_program::hash::hashv (248 samples, 0.78%)</title><rect x="98.0749%" y="725" width="0.7763%" height="15" fill="rgb(233,115,5)" fg:x="31332" fg:w="248"/><text x="98.3249%" y="735.50"></text></g><g><title>solana_program::hash::Hasher::hashv (140 samples, 0.44%)</title><rect x="98.4130%" y="709" width="0.4382%" height="15" fill="rgb(207,226,44)" fg:x="31440" fg:w="140"/><text x="98.6630%" y="719.50"></text></g><g><title>solana_program::hash::Hasher::hash (140 samples, 0.44%)</title><rect x="98.4130%" y="693" width="0.4382%" height="15" fill="rgb(208,126,0)" fg:x="31440" fg:w="140"/><text x="98.6630%" y="703.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (140 samples, 0.44%)</title><rect x="98.4130%" y="677" width="0.4382%" height="15" fill="rgb(244,66,21)" fg:x="31440" fg:w="140"/><text x="98.6630%" y="687.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (140 samples, 0.44%)</title><rect x="98.4130%" y="661" width="0.4382%" height="15" fill="rgb(222,97,12)" fg:x="31440" fg:w="140"/><text x="98.6630%" y="671.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (140 samples, 0.44%)</title><rect x="98.4130%" y="645" width="0.4382%" height="15" fill="rgb(219,213,19)" fg:x="31440" fg:w="140"/><text x="98.6630%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (107 samples, 0.33%)</title><rect x="98.5163%" y="629" width="0.3349%" height="15" fill="rgb(252,169,30)" fg:x="31473" fg:w="107"/><text x="98.7663%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.33%)</title><rect x="98.5163%" y="613" width="0.3349%" height="15" fill="rgb(206,32,51)" fg:x="31473" fg:w="107"/><text x="98.7663%" y="623.50"></text></g><g><title>[unknown] (4,937 samples, 15.45%)</title><rect x="83.5853%" y="741" width="15.4537%" height="15" fill="rgb(250,172,42)" fg:x="26703" fg:w="4937"/><text x="83.8353%" y="751.50">[unknown]</text></g><g><title>unlink_chunk (60 samples, 0.19%)</title><rect x="98.8512%" y="725" width="0.1878%" height="15" fill="rgb(209,34,43)" fg:x="31580" fg:w="60"/><text x="99.1012%" y="735.50"></text></g><g><title>__GI___libc_malloc (158 samples, 0.49%)</title><rect x="99.0422%" y="741" width="0.4946%" height="15" fill="rgb(223,11,35)" fg:x="31641" fg:w="158"/><text x="99.2922%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 0.12%)</title><rect x="99.5367%" y="741" width="0.1221%" height="15" fill="rgb(251,219,26)" fg:x="31799" fg:w="39"/><text x="99.7867%" y="751.50"></text></g><g><title>__GI___libc_free (20 samples, 0.06%)</title><rect x="99.6682%" y="725" width="0.0626%" height="15" fill="rgb(231,119,3)" fg:x="31841" fg:w="20"/><text x="99.9182%" y="735.50"></text></g><g><title>main_arena (35 samples, 0.11%)</title><rect x="99.6682%" y="741" width="0.1096%" height="15" fill="rgb(216,97,11)" fg:x="31841" fg:w="35"/><text x="99.9182%" y="751.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.05%)</title><rect x="99.7308%" y="725" width="0.0470%" height="15" fill="rgb(223,59,9)" fg:x="31861" fg:w="15"/><text x="99.9808%" y="735.50"></text></g><g><title>sha2::sha256::x86::compress (68 samples, 0.21%)</title><rect x="99.7778%" y="741" width="0.2129%" height="15" fill="rgb(233,93,31)" fg:x="31876" fg:w="68"/><text x="100.0278%" y="751.50"></text></g><g><title>all (31,947 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(239,81,33)" fg:x="0" fg:w="31947"/><text x="0.2500%" y="783.50"></text></g><g><title>merkle_bench-d6 (31,947 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(213,120,34)" fg:x="0" fg:w="31947"/><text x="0.2500%" y="767.50">merkle_bench-d6</text></g></svg></svg>